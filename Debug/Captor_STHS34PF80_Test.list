
Captor_STHS34PF80_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003408  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c0  080036c0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080036c0  080036c0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036c0  080036c0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080036c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000006c  08003734  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003734  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086b7  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d71  00000000  00000000  0002874d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e72  00000000  00000000  0002ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbb1  00000000  00000000  0004e8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2be7  00000000  00000000  0005e4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131092  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003420  00000000  00000000  001310e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000006c 	.word	0x2000006c
 800015c:	00000000 	.word	0x00000000
 8000160:	08003530 	.word	0x08003530

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000070 	.word	0x20000070
 800017c:	08003530 	.word	0x08003530

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	461a      	mov	r2, r3
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	4a03      	ldr	r2, [pc, #12]	; (8000240 <HAL_IncTick+0x20>)
 8000232:	6013      	str	r3, [r2, #0]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	20000000 	.word	0x20000000
 8000240:	20000088 	.word	0x20000088

08000244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return uwTick;
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <HAL_GetTick+0x10>)
 800024a:	681b      	ldr	r3, [r3, #0]
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	20000088 	.word	0x20000088

08000258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000260:	f7ff fff0 	bl	8000244 <HAL_GetTick>
 8000264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000270:	d005      	beq.n	800027e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <HAL_Delay+0x44>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	461a      	mov	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	4413      	add	r3, r2
 800027c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800027e:	bf00      	nop
 8000280:	f7ff ffe0 	bl	8000244 <HAL_GetTick>
 8000284:	4602      	mov	r2, r0
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	68fa      	ldr	r2, [r7, #12]
 800028c:	429a      	cmp	r2, r3
 800028e:	d8f7      	bhi.n	8000280 <HAL_Delay+0x28>
  {
  }
}
 8000290:	bf00      	nop
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000000 	.word	0x20000000

080002a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b08b      	sub	sp, #44	; 0x2c
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
#else
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	fa93 f3a3 	rbit	r3, r3
 80002ba:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80002c6:	2320      	movs	r3, #32
 80002c8:	e003      	b.n	80002d2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80002ca:	69bb      	ldr	r3, [r7, #24]
 80002cc:	fab3 f383 	clz	r3, r3
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	2103      	movs	r1, #3
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	43db      	mvns	r3, r3
 80002dc:	401a      	ands	r2, r3
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002e2:	6a3b      	ldr	r3, [r7, #32]
 80002e4:	fa93 f3a3 	rbit	r3, r3
 80002e8:	61fb      	str	r3, [r7, #28]
  return result;
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80002ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d101      	bne.n	80002f8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80002f4:	2320      	movs	r3, #32
 80002f6:	e003      	b.n	8000300 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80002f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fa:	fab3 f383 	clz	r3, r3
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	6879      	ldr	r1, [r7, #4]
 8000304:	fa01 f303 	lsl.w	r3, r1, r3
 8000308:	431a      	orrs	r2, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	601a      	str	r2, [r3, #0]
#endif /* CORE_CM0PLUS */
}
 800030e:	bf00      	nop
 8000310:	372c      	adds	r7, #44	; 0x2c
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr

08000318 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	43db      	mvns	r3, r3
 800032c:	401a      	ands	r2, r3
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	6879      	ldr	r1, [r7, #4]
 8000332:	fb01 f303 	mul.w	r3, r1, r3
 8000336:	431a      	orrs	r2, r3
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	605a      	str	r2, [r3, #4]
}
 800033c:	bf00      	nop
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr

08000346 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000346:	b480      	push	{r7}
 8000348:	b08b      	sub	sp, #44	; 0x2c
 800034a:	af00      	add	r7, sp, #0
 800034c:	60f8      	str	r0, [r7, #12]
 800034e:	60b9      	str	r1, [r7, #8]
 8000350:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
#else
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	fa93 f3a3 	rbit	r3, r3
 8000360:	613b      	str	r3, [r7, #16]
  return result;
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000366:	69bb      	ldr	r3, [r7, #24]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d101      	bne.n	8000370 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800036c:	2320      	movs	r3, #32
 800036e:	e003      	b.n	8000378 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	fab3 f383 	clz	r3, r3
 8000376:	b2db      	uxtb	r3, r3
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	2103      	movs	r1, #3
 800037c:	fa01 f303 	lsl.w	r3, r1, r3
 8000380:	43db      	mvns	r3, r3
 8000382:	401a      	ands	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000388:	6a3b      	ldr	r3, [r7, #32]
 800038a:	fa93 f3a3 	rbit	r3, r3
 800038e:	61fb      	str	r3, [r7, #28]
  return result;
 8000390:	69fb      	ldr	r3, [r7, #28]
 8000392:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000396:	2b00      	cmp	r3, #0
 8000398:	d101      	bne.n	800039e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800039a:	2320      	movs	r3, #32
 800039c:	e003      	b.n	80003a6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800039e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	431a      	orrs	r2, r3
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
#endif /* CORE_CM0PLUS */
}
 80003b4:	bf00      	nop
 80003b6:	372c      	adds	r7, #44	; 0x2c
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003be:	b480      	push	{r7}
 80003c0:	b08b      	sub	sp, #44	; 0x2c
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
#else
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	68da      	ldr	r2, [r3, #12]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	fa93 f3a3 	rbit	r3, r3
 80003d8:	613b      	str	r3, [r7, #16]
  return result;
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80003de:	69bb      	ldr	r3, [r7, #24]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d101      	bne.n	80003e8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80003e4:	2320      	movs	r3, #32
 80003e6:	e003      	b.n	80003f0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	fab3 f383 	clz	r3, r3
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	2103      	movs	r1, #3
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000400:	6a3b      	ldr	r3, [r7, #32]
 8000402:	fa93 f3a3 	rbit	r3, r3
 8000406:	61fb      	str	r3, [r7, #28]
  return result;
 8000408:	69fb      	ldr	r3, [r7, #28]
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040e:	2b00      	cmp	r3, #0
 8000410:	d101      	bne.n	8000416 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000412:	2320      	movs	r3, #32
 8000414:	e003      	b.n	800041e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000418:	fab3 f383 	clz	r3, r3
 800041c:	b2db      	uxtb	r3, r3
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	6879      	ldr	r1, [r7, #4]
 8000422:	fa01 f303 	lsl.w	r3, r1, r3
 8000426:	431a      	orrs	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	60da      	str	r2, [r3, #12]
#endif /* CORE_CM0PLUS */
}
 800042c:	bf00      	nop
 800042e:	372c      	adds	r7, #44	; 0x2c
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000436:	b480      	push	{r7}
 8000438:	b08b      	sub	sp, #44	; 0x2c
 800043a:	af00      	add	r7, sp, #0
 800043c:	60f8      	str	r0, [r7, #12]
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6a1a      	ldr	r2, [r3, #32]
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	fa93 f3a3 	rbit	r3, r3
 8000450:	613b      	str	r3, [r7, #16]
  return result;
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000456:	69bb      	ldr	r3, [r7, #24]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d101      	bne.n	8000460 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800045c:	2320      	movs	r3, #32
 800045e:	e003      	b.n	8000468 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000460:	69bb      	ldr	r3, [r7, #24]
 8000462:	fab3 f383 	clz	r3, r3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	210f      	movs	r1, #15
 800046c:	fa01 f303 	lsl.w	r3, r1, r3
 8000470:	43db      	mvns	r3, r3
 8000472:	401a      	ands	r2, r3
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000478:	6a3b      	ldr	r3, [r7, #32]
 800047a:	fa93 f3a3 	rbit	r3, r3
 800047e:	61fb      	str	r3, [r7, #28]
  return result;
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000486:	2b00      	cmp	r3, #0
 8000488:	d101      	bne.n	800048e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800048a:	2320      	movs	r3, #32
 800048c:	e003      	b.n	8000496 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000490:	fab3 f383 	clz	r3, r3
 8000494:	b2db      	uxtb	r3, r3
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	fa01 f303 	lsl.w	r3, r1, r3
 800049e:	431a      	orrs	r2, r3
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
#endif /* CORE_CM0PLUS */
}
 80004a4:	bf00      	nop
 80004a6:	372c      	adds	r7, #44	; 0x2c
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b08b      	sub	sp, #44	; 0x2c
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	60f8      	str	r0, [r7, #12]
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	0a1b      	lsrs	r3, r3, #8
 80004c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	fa93 f3a3 	rbit	r3, r3
 80004ca:	613b      	str	r3, [r7, #16]
  return result;
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80004d0:	69bb      	ldr	r3, [r7, #24]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d101      	bne.n	80004da <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80004d6:	2320      	movs	r3, #32
 80004d8:	e003      	b.n	80004e2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	fab3 f383 	clz	r3, r3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	210f      	movs	r1, #15
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	43db      	mvns	r3, r3
 80004ec:	401a      	ands	r2, r3
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	0a1b      	lsrs	r3, r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004f4:	6a3b      	ldr	r3, [r7, #32]
 80004f6:	fa93 f3a3 	rbit	r3, r3
 80004fa:	61fb      	str	r3, [r7, #28]
  return result;
 80004fc:	69fb      	ldr	r3, [r7, #28]
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000502:	2b00      	cmp	r3, #0
 8000504:	d101      	bne.n	800050a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000506:	2320      	movs	r3, #32
 8000508:	e003      	b.n	8000512 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050c:	fab3 f383 	clz	r3, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	431a      	orrs	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
#endif /* CORE_CM0PLUS */
}
 8000520:	bf00      	nop
 8000522:	372c      	adds	r7, #44	; 0x2c
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b088      	sub	sp, #32
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	fa93 f3a3 	rbit	r3, r3
 8000540:	60fb      	str	r3, [r7, #12]
  return result;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d101      	bne.n	8000550 <LL_GPIO_Init+0x26>
    return 32U;
 800054c:	2320      	movs	r3, #32
 800054e:	e003      	b.n	8000558 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	fab3 f383 	clz	r3, r3
 8000556:	b2db      	uxtb	r3, r3
 8000558:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800055a:	e04e      	b.n	80005fa <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	2101      	movs	r1, #1
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	4013      	ands	r3, r2
 800056a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d040      	beq.n	80005f4 <LL_GPIO_Init+0xca>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	69b9      	ldr	r1, [r7, #24]
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff fe90 	bl	80002a0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d003      	beq.n	8000590 <LL_GPIO_Init+0x66>
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d10d      	bne.n	80005ac <LL_GPIO_Init+0x82>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	461a      	mov	r2, r3
 8000596:	69b9      	ldr	r1, [r7, #24]
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff fed4 	bl	8000346 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	461a      	mov	r2, r3
 80005a4:	69b9      	ldr	r1, [r7, #24]
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff feb6 	bl	8000318 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	461a      	mov	r2, r3
 80005b2:	69b9      	ldr	r1, [r7, #24]
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ff02 	bl	80003be <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d111      	bne.n	80005e6 <LL_GPIO_Init+0xbc>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	2bff      	cmp	r3, #255	; 0xff
 80005c6:	d807      	bhi.n	80005d8 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	461a      	mov	r2, r3
 80005ce:	69b9      	ldr	r1, [r7, #24]
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff ff30 	bl	8000436 <LL_GPIO_SetAFPin_0_7>
 80005d6:	e006      	b.n	80005e6 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	461a      	mov	r2, r3
 80005de:	69b9      	ldr	r1, [r7, #24]
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff64 	bl	80004ae <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	461a      	mov	r2, r3
 80005ec:	69b9      	ldr	r1, [r7, #24]
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff fe56 	bl	80002a0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	3301      	adds	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	fa22 f303 	lsr.w	r3, r2, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1a9      	bne.n	800055c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000608:	2301      	movs	r3, #1
}
 800060a:	4618      	mov	r0, r3
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f043 0201 	orr.w	r2, r3, #1
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f023 0201 	bic.w	r2, r3, #1
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 800064e:	b480      	push	{r7}
 8000650:	b085      	sub	sp, #20
 8000652:	af00      	add	r7, sp, #0
 8000654:	60f8      	str	r0, [r7, #12]
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	0219      	lsls	r1, r3, #8
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	430b      	orrs	r3, r1
 800066a:	431a      	orrs	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 800067a:	b480      	push	{r7}
 800067c:	b085      	sub	sp, #20
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800068e:	f023 0307 	bic.w	r3, r3, #7
 8000692:	68b9      	ldr	r1, [r7, #8]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	430a      	orrs	r2, r1
 8000698:	431a      	orrs	r2, r3
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	609a      	str	r2, [r3, #8]
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	609a      	str	r2, [r3, #8]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	609a      	str	r2, [r3, #8]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	611a      	str	r2, [r3, #16]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	431a      	orrs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	431a      	orrs	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	605a      	str	r2, [r3, #4]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff6d 	bl	8000630 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	6899      	ldr	r1, [r3, #8]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	461a      	mov	r2, r3
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff74 	bl	800064e <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	4619      	mov	r1, r3
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ffb9 	bl	80006e4 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ff4d 	bl	8000612 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ffa4 	bl	80006c6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	6919      	ldr	r1, [r3, #16]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	461a      	mov	r2, r3
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff76 	bl	800067a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff86 	bl	80006a8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ffab 	bl	80006fe <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	4619      	mov	r1, r3
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffb7 	bl	8000722 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80007b4:	2301      	movs	r3, #1
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80007d0:	d101      	bne.n	80007d6 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80007d2:	2301      	movs	r3, #1
 80007d4:	e000      	b.n	80007d8 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80007e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007f2:	d101      	bne.n	80007f8 <LL_RCC_HSI_IsReady+0x18>
 80007f4:	2301      	movs	r3, #1
 80007f6:	e000      	b.n	80007fa <LL_RCC_HSI_IsReady+0x1a>
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr

08000802 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800080a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	2b02      	cmp	r3, #2
 8000814:	d101      	bne.n	800081a <LL_RCC_LSE_IsReady+0x18>
 8000816:	2301      	movs	r3, #1
 8000818:	e000      	b.n	800081c <LL_RCC_LSE_IsReady+0x1a>
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	2b08      	cmp	r3, #8
 8000834:	d101      	bne.n	800083a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800085e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000866:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 030c 	and.w	r3, r3, #12
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800088c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80008a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80008b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	401a      	ands	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	041b      	lsls	r3, r3, #16
 80008e2:	4313      	orrs	r3, r2
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80008f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800090a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	f003 0303 	and.w	r3, r3, #3
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d131      	bne.n	80009be <LL_RCC_GetUSARTClockFreq+0x76>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffb5 	bl	80008ca <LL_RCC_GetUSARTClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8000966:	d015      	beq.n	8000994 <LL_RCC_GetUSARTClockFreq+0x4c>
 8000968:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800096c:	d81b      	bhi.n	80009a6 <LL_RCC_GetUSARTClockFreq+0x5e>
 800096e:	4a33      	ldr	r2, [pc, #204]	; (8000a3c <LL_RCC_GetUSARTClockFreq+0xf4>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d003      	beq.n	800097c <LL_RCC_GetUSARTClockFreq+0x34>
 8000974:	4a32      	ldr	r2, [pc, #200]	; (8000a40 <LL_RCC_GetUSARTClockFreq+0xf8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d004      	beq.n	8000984 <LL_RCC_GetUSARTClockFreq+0x3c>
 800097a:	e014      	b.n	80009a6 <LL_RCC_GetUSARTClockFreq+0x5e>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800097c:	f000 f868 	bl	8000a50 <RCC_GetSystemClockFreq>
 8000980:	60f8      	str	r0, [r7, #12]
        break;
 8000982:	e055      	b.n	8000a30 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8000984:	f7ff ff2c 	bl	80007e0 <LL_RCC_HSI_IsReady>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d149      	bne.n	8000a22 <LL_RCC_GetUSARTClockFreq+0xda>
        {
          usart_frequency = HSI_VALUE;
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <LL_RCC_GetUSARTClockFreq+0xfc>)
 8000990:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000992:	e046      	b.n	8000a22 <LL_RCC_GetUSARTClockFreq+0xda>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8000994:	f7ff ff35 	bl	8000802 <LL_RCC_LSE_IsReady>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d143      	bne.n	8000a26 <LL_RCC_GetUSARTClockFreq+0xde>
        {
          usart_frequency = LSE_VALUE;
 800099e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009a4:	e03f      	b.n	8000a26 <LL_RCC_GetUSARTClockFreq+0xde>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 80009a6:	f000 f853 	bl	8000a50 <RCC_GetSystemClockFreq>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f8f7 	bl	8000ba0 <RCC_GetHCLK1ClockFreq>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f91d 	bl	8000bf4 <RCC_GetPCLK2ClockFreq>
 80009ba:	60f8      	str	r0, [r7, #12]
        break;
 80009bc:	e038      	b.n	8000a30 <LL_RCC_GetUSARTClockFreq+0xe8>
    }
  }
  else
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ff83 	bl	80008ca <LL_RCC_GetUSARTClockSource>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80009ca:	d015      	beq.n	80009f8 <LL_RCC_GetUSARTClockFreq+0xb0>
 80009cc:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80009d0:	d81b      	bhi.n	8000a0a <LL_RCC_GetUSARTClockFreq+0xc2>
 80009d2:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <LL_RCC_GetUSARTClockFreq+0x100>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d003      	beq.n	80009e0 <LL_RCC_GetUSARTClockFreq+0x98>
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <LL_RCC_GetUSARTClockFreq+0x104>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d004      	beq.n	80009e8 <LL_RCC_GetUSARTClockFreq+0xa0>
 80009de:	e014      	b.n	8000a0a <LL_RCC_GetUSARTClockFreq+0xc2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80009e0:	f000 f836 	bl	8000a50 <RCC_GetSystemClockFreq>
 80009e4:	60f8      	str	r0, [r7, #12]
        break;
 80009e6:	e023      	b.n	8000a30 <LL_RCC_GetUSARTClockFreq+0xe8>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80009e8:	f7ff fefa 	bl	80007e0 <LL_RCC_HSI_IsReady>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d11b      	bne.n	8000a2a <LL_RCC_GetUSARTClockFreq+0xe2>
        {
          usart_frequency = HSI_VALUE;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <LL_RCC_GetUSARTClockFreq+0xfc>)
 80009f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009f6:	e018      	b.n	8000a2a <LL_RCC_GetUSARTClockFreq+0xe2>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80009f8:	f7ff ff03 	bl	8000802 <LL_RCC_LSE_IsReady>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d115      	bne.n	8000a2e <LL_RCC_GetUSARTClockFreq+0xe6>
        {
          usart_frequency = LSE_VALUE;
 8000a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a06:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000a08:	e011      	b.n	8000a2e <LL_RCC_GetUSARTClockFreq+0xe6>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLK1ClockFreq(RCC_GetSystemClockFreq()));
 8000a0a:	f000 f821 	bl	8000a50 <RCC_GetSystemClockFreq>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f8c5 	bl	8000ba0 <RCC_GetHCLK1ClockFreq>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f8d7 	bl	8000bcc <RCC_GetPCLK1ClockFreq>
 8000a1e:	60f8      	str	r0, [r7, #12]
        break;
 8000a20:	e006      	b.n	8000a30 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8000a22:	bf00      	nop
 8000a24:	e004      	b.n	8000a30 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8000a26:	bf00      	nop
 8000a28:	e002      	b.n	8000a30 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8000a2a:	bf00      	nop
 8000a2c:	e000      	b.n	8000a30 <LL_RCC_GetUSARTClockFreq+0xe8>
        break;
 8000a2e:	bf00      	nop
    }
  }
  return usart_frequency;
 8000a30:	68fb      	ldr	r3, [r7, #12]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	00030001 	.word	0x00030001
 8000a40:	00030002 	.word	0x00030002
 8000a44:	00f42400 	.word	0x00f42400
 8000a48:	000c0004 	.word	0x000c0004
 8000a4c:	000c0008 	.word	0x000c0008

08000a50 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock (SYSCLK) frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000a56:	f7ff ff0c 	bl	8000872 <LL_RCC_GetSysClkSource>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b0c      	cmp	r3, #12
 8000a5e:	d861      	bhi.n	8000b24 <RCC_GetSystemClockFreq+0xd4>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <RCC_GetSystemClockFreq+0x18>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a9d 	.word	0x08000a9d
 8000a6c:	08000b25 	.word	0x08000b25
 8000a70:	08000b25 	.word	0x08000b25
 8000a74:	08000b25 	.word	0x08000b25
 8000a78:	08000b01 	.word	0x08000b01
 8000a7c:	08000b25 	.word	0x08000b25
 8000a80:	08000b25 	.word	0x08000b25
 8000a84:	08000b25 	.word	0x08000b25
 8000a88:	08000b07 	.word	0x08000b07
 8000a8c:	08000b25 	.word	0x08000b25
 8000a90:	08000b25 	.word	0x08000b25
 8000a94:	08000b25 	.word	0x08000b25
 8000a98:	08000b1d 	.word	0x08000b1d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000a9c:	f7ff fec2 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d115      	bne.n	8000ad2 <RCC_GetSystemClockFreq+0x82>
 8000aa6:	f7ff febd 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d106      	bne.n	8000abe <RCC_GetSystemClockFreq+0x6e>
 8000ab0:	f7ff fec8 	bl	8000844 <LL_RCC_MSI_GetRange>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	0a1b      	lsrs	r3, r3, #8
 8000ab8:	f003 030f 	and.w	r3, r3, #15
 8000abc:	e005      	b.n	8000aca <RCC_GetSystemClockFreq+0x7a>
 8000abe:	f7ff fecc 	bl	800085a <LL_RCC_MSI_GetRangeAfterStandby>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	4a32      	ldr	r2, [pc, #200]	; (8000b94 <RCC_GetSystemClockFreq+0x144>)
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	e014      	b.n	8000afc <RCC_GetSystemClockFreq+0xac>
 8000ad2:	f7ff fea7 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d106      	bne.n	8000aea <RCC_GetSystemClockFreq+0x9a>
 8000adc:	f7ff feb2 	bl	8000844 <LL_RCC_MSI_GetRange>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	091b      	lsrs	r3, r3, #4
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	e005      	b.n	8000af6 <RCC_GetSystemClockFreq+0xa6>
 8000aea:	f7ff feb6 	bl	800085a <LL_RCC_MSI_GetRangeAfterStandby>
 8000aee:	4603      	mov	r3, r0
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <RCC_GetSystemClockFreq+0x144>)
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000afe:	e043      	b.n	8000b88 <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <RCC_GetSystemClockFreq+0x148>)
 8000b02:	607b      	str	r3, [r7, #4]
      break;
 8000b04:	e040      	b.n	8000b88 <RCC_GetSystemClockFreq+0x138>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8000b06:	f7ff fe5a 	bl	80007be <LL_RCC_HSE_IsEnabledDiv2>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d102      	bne.n	8000b16 <RCC_GetSystemClockFreq+0xc6>
      {
        frequency = HSE_VALUE / 2U;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <RCC_GetSystemClockFreq+0x148>)
 8000b12:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSE_VALUE;
      }
      break;
 8000b14:	e038      	b.n	8000b88 <RCC_GetSystemClockFreq+0x138>
        frequency = HSE_VALUE;
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <RCC_GetSystemClockFreq+0x14c>)
 8000b18:	607b      	str	r3, [r7, #4]
      break;
 8000b1a:	e035      	b.n	8000b88 <RCC_GetSystemClockFreq+0x138>


    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000b1c:	f000 f87e 	bl	8000c1c <RCC_PLL_GetFreqDomain_SYS>
 8000b20:	6078      	str	r0, [r7, #4]
      break;
 8000b22:	e031      	b.n	8000b88 <RCC_GetSystemClockFreq+0x138>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000b24:	f7ff fe7e 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d115      	bne.n	8000b5a <RCC_GetSystemClockFreq+0x10a>
 8000b2e:	f7ff fe79 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d106      	bne.n	8000b46 <RCC_GetSystemClockFreq+0xf6>
 8000b38:	f7ff fe84 	bl	8000844 <LL_RCC_MSI_GetRange>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	f003 030f 	and.w	r3, r3, #15
 8000b44:	e005      	b.n	8000b52 <RCC_GetSystemClockFreq+0x102>
 8000b46:	f7ff fe88 	bl	800085a <LL_RCC_MSI_GetRangeAfterStandby>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <RCC_GetSystemClockFreq+0x144>)
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	e014      	b.n	8000b84 <RCC_GetSystemClockFreq+0x134>
 8000b5a:	f7ff fe63 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d106      	bne.n	8000b72 <RCC_GetSystemClockFreq+0x122>
 8000b64:	f7ff fe6e 	bl	8000844 <LL_RCC_MSI_GetRange>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	e005      	b.n	8000b7e <RCC_GetSystemClockFreq+0x12e>
 8000b72:	f7ff fe72 	bl	800085a <LL_RCC_MSI_GetRangeAfterStandby>
 8000b76:	4603      	mov	r3, r0
 8000b78:	091b      	lsrs	r3, r3, #4
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <RCC_GetSystemClockFreq+0x144>)
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	607b      	str	r3, [r7, #4]
                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                          LL_RCC_MSI_GetRange() :
                                          LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000b86:	bf00      	nop
  }

  return frequency;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	080035b8 	.word	0x080035b8
 8000b98:	00f42400 	.word	0x00f42400
 8000b9c:	01e84800 	.word	0x01e84800

08000ba0 <RCC_GetHCLK1ClockFreq>:
  * @brief  Return HCLK1 clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLK1ClockFreq(uint32_t SYSCLK_Frequency)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK1_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000ba8:	f7ff fe6e 	bl	8000888 <LL_RCC_GetAHBPrescaler>
 8000bac:	4603      	mov	r3, r0
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	f003 030f 	and.w	r3, r3, #15
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <RCC_GetHCLK1ClockFreq+0x28>)
 8000bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08003558 	.word	0x08003558

08000bcc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000bd4:	f7ff fe63 	bl	800089e <LL_RCC_GetAPB1Prescaler>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <RCC_GetPCLK1ClockFreq+0x24>)
 8000bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08003598 	.word	0x08003598

08000bf4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000bfc:	f7ff fe5a 	bl	80008b4 <LL_RCC_GetAPB2Prescaler>
 8000c00:	4603      	mov	r3, r0
 8000c02:	0adb      	lsrs	r3, r3, #11
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <RCC_GetPCLK2ClockFreq+0x24>)
 8000c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	08003598 	.word	0x08003598

08000c1c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock (PLLRCLK) frequency used for system domain
  * @retval PLLRCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000c22:	f7ff fe86 	bl	8000932 <LL_RCC_PLL_GetMainSource>
 8000c26:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d03e      	beq.n	8000cac <RCC_PLL_GetFreqDomain_SYS+0x90>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d846      	bhi.n	8000cc2 <RCC_PLL_GetFreqDomain_SYS+0xa6>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d003      	beq.n	8000c42 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d032      	beq.n	8000ca6 <RCC_PLL_GetFreqDomain_SYS+0x8a>
 8000c40:	e03f      	b.n	8000cc2 <RCC_PLL_GetFreqDomain_SYS+0xa6>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000c42:	f7ff fdef 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d115      	bne.n	8000c78 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8000c4c:	f7ff fdea 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d106      	bne.n	8000c64 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8000c56:	f7ff fdf5 	bl	8000844 <LL_RCC_MSI_GetRange>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	e005      	b.n	8000c70 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8000c64:	f7ff fdf9 	bl	800085a <LL_RCC_MSI_GetRangeAfterStandby>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	f003 030f 	and.w	r3, r3, #15
 8000c70:	4a39      	ldr	r2, [pc, #228]	; (8000d58 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8000c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c76:	e014      	b.n	8000ca2 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8000c78:	f7ff fdd4 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d106      	bne.n	8000c90 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8000c82:	f7ff fddf 	bl	8000844 <LL_RCC_MSI_GetRange>
 8000c86:	4603      	mov	r3, r0
 8000c88:	091b      	lsrs	r3, r3, #4
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	e005      	b.n	8000c9c <RCC_PLL_GetFreqDomain_SYS+0x80>
 8000c90:	f7ff fde3 	bl	800085a <LL_RCC_MSI_GetRangeAfterStandby>
 8000c94:	4603      	mov	r3, r0
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000ca4:	e03f      	b.n	8000d26 <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <RCC_PLL_GetFreqDomain_SYS+0x140>)
 8000ca8:	607b      	str	r3, [r7, #4]
      break;
 8000caa:	e03c      	b.n	8000d26 <RCC_PLL_GetFreqDomain_SYS+0x10a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8000cac:	f7ff fd87 	bl	80007be <LL_RCC_HSE_IsEnabledDiv2>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d102      	bne.n	8000cbc <RCC_PLL_GetFreqDomain_SYS+0xa0>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8000cb6:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <RCC_PLL_GetFreqDomain_SYS+0x140>)
 8000cb8:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8000cba:	e034      	b.n	8000d26 <RCC_PLL_GetFreqDomain_SYS+0x10a>
        pllinputfreq = HSE_VALUE;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <RCC_PLL_GetFreqDomain_SYS+0x144>)
 8000cbe:	607b      	str	r3, [r7, #4]
      break;
 8000cc0:	e031      	b.n	8000d26 <RCC_PLL_GetFreqDomain_SYS+0x10a>


    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000cc2:	f7ff fdaf 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d115      	bne.n	8000cf8 <RCC_PLL_GetFreqDomain_SYS+0xdc>
 8000ccc:	f7ff fdaa 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d106      	bne.n	8000ce4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8000cd6:	f7ff fdb5 	bl	8000844 <LL_RCC_MSI_GetRange>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	e005      	b.n	8000cf0 <RCC_PLL_GetFreqDomain_SYS+0xd4>
 8000ce4:	f7ff fdb9 	bl	800085a <LL_RCC_MSI_GetRangeAfterStandby>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	f003 030f 	and.w	r3, r3, #15
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8000cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf6:	e014      	b.n	8000d22 <RCC_PLL_GetFreqDomain_SYS+0x106>
 8000cf8:	f7ff fd94 	bl	8000824 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d106      	bne.n	8000d10 <RCC_PLL_GetFreqDomain_SYS+0xf4>
 8000d02:	f7ff fd9f 	bl	8000844 <LL_RCC_MSI_GetRange>
 8000d06:	4603      	mov	r3, r0
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	e005      	b.n	8000d1c <RCC_PLL_GetFreqDomain_SYS+0x100>
 8000d10:	f7ff fda3 	bl	800085a <LL_RCC_MSI_GetRangeAfterStandby>
 8000d14:	4603      	mov	r3, r0
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	f003 030f 	and.w	r3, r3, #15
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <RCC_PLL_GetFreqDomain_SYS+0x13c>)
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	607b      	str	r3, [r7, #4]
                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
                                             LL_RCC_MSI_GetRange() :
                                             LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000d24:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000d26:	f7ff fde2 	bl	80008ee <LL_RCC_PLL_GetN>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	fb03 f402 	mul.w	r4, r3, r2
 8000d32:	f7ff fdf3 	bl	800091c <LL_RCC_PLL_GetDivider>
 8000d36:	4603      	mov	r3, r0
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	fbb4 f4f3 	udiv	r4, r4, r3
 8000d40:	f7ff fde1 	bl	8000906 <LL_RCC_PLL_GetR>
 8000d44:	4603      	mov	r3, r0
 8000d46:	0f5b      	lsrs	r3, r3, #29
 8000d48:	3301      	adds	r3, #1
 8000d4a:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	080035b8 	.word	0x080035b8
 8000d5c:	00f42400 	.word	0x00f42400
 8000d60:	01e84800 	.word	0x01e84800

08000d64 <LL_InitTick>:
  * @param  Ticks Number of ticks
  * @retval None
  */
#endif /* CORE_CM0PLUS */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  if (Ticks > 0U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00c      	beq.n	8000d8e <LL_InitTick+0x2a>
  {
    /* Configure the SysTick to have interrupt in 1ms time base */
    SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <LL_InitTick+0x34>)
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
    SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <LL_InitTick+0x34>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <LL_InitTick+0x34>)
 8000d8a:	2205      	movs	r2, #5
 8000d8c:	601a      	str	r2, [r3, #0]
                     SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <LL_Init1msTick>:
    *         (HCLK1_Frequency field)
    * @retval None
    */
#endif /* CORE_CM0PLUS */
  void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000);
 8000da4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ffdb 	bl	8000d64 <LL_InitTick>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <LL_SetSystemCoreClock>:
            @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
#endif /* CORE_CM0PLUS */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <LL_SetSystemCoreClock+0x18>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <LL_I2C_IsActiveFlag_TXE>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d101      	bne.n	8000dec <LL_I2C_IsActiveFlag_TXE+0x18>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <LL_I2C_IsActiveFlag_TXE+0x1a>
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	0d5b      	lsrs	r3, r3, #21
 8000e0e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <LL_I2C_HandleTransfer+0x48>)
 8000e14:	430b      	orrs	r3, r1
 8000e16:	43db      	mvns	r3, r3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4319      	orrs	r1, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	041b      	lsls	r3, r3, #16
 8000e24:	4319      	orrs	r1, r3
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4319      	orrs	r1, r3
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	03ff7bff 	.word	0x03ff7bff

08000e44 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8000e50:	78fa      	ldrb	r2, [r7, #3]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <I2C_STHS34PF80_Data_Reg_Init>:
extern uint8_t I2C_data_Rx;
extern uint8_t I2C_IsActiveFlag_RXNE;

//------------------ STHS34PF80 REG INIT -------------------------------------------------------------------- STHS34PF80 REG INIT --------------------------------------------*/
void I2C_STHS34PF80_Data_Reg_Init (void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	data_reg.LPF1		= 0x04;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <I2C_STHS34PF80_Data_Reg_Init+0x3c>)
 8000e66:	2204      	movs	r2, #4
 8000e68:	701a      	strb	r2, [r3, #0]
	data_reg.LPF2		= 0x22;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <I2C_STHS34PF80_Data_Reg_Init+0x3c>)
 8000e6c:	2222      	movs	r2, #34	; 0x22
 8000e6e:	705a      	strb	r2, [r3, #1]
	data_reg.AVG_TRIM	= 0x03;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <I2C_STHS34PF80_Data_Reg_Init+0x3c>)
 8000e72:	2203      	movs	r2, #3
 8000e74:	709a      	strb	r2, [r3, #2]
	data_reg.CTRL0		= 0xF1;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <I2C_STHS34PF80_Data_Reg_Init+0x3c>)
 8000e78:	22f1      	movs	r2, #241	; 0xf1
 8000e7a:	70da      	strb	r2, [r3, #3]
	data_reg.SENS_DATA	= 0x00;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <I2C_STHS34PF80_Data_Reg_Init+0x3c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	711a      	strb	r2, [r3, #4]
	data_reg.CTRL1		= 0x00;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <I2C_STHS34PF80_Data_Reg_Init+0x3c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	715a      	strb	r2, [r3, #5]
	data_reg.CTRL2		= 0x00;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <I2C_STHS34PF80_Data_Reg_Init+0x3c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	719a      	strb	r2, [r3, #6]
	data_reg.CTRL3		= 0x00;
 8000e8e:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <I2C_STHS34PF80_Data_Reg_Init+0x3c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	71da      	strb	r2, [r3, #7]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	2000008c 	.word	0x2000008c

08000ea0 <I2C_STHS34PF80_Write>:


//------------------ I2C STHS34PF80 WRITE ------------------------------------------------------------------- I2C STHS34PF80 WRITE -------------------------------------------*/
void I2C_STHS34PF80_Write (uint8_t addr_reg, uint8_t data)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));		//waiting for release from queue
 8000eb0:	bf00      	nop
 8000eb2:	4813      	ldr	r0, [pc, #76]	; (8000f00 <I2C_STHS34PF80_Write+0x60>)
 8000eb4:	f7ff ff8e 	bl	8000dd4 <LL_I2C_IsActiveFlag_TXE>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f9      	beq.n	8000eb2 <I2C_STHS34PF80_Write+0x12>
	LL_I2C_TransmitData8(I2C1, addr_reg);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480f      	ldr	r0, [pc, #60]	; (8000f00 <I2C_STHS34PF80_Write+0x60>)
 8000ec4:	f7ff ffbe 	bl	8000e44 <LL_I2C_TransmitData8>
	LL_I2C_HandleTransfer(I2C1, SENSOR_ADDR<<1, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <I2C_STHS34PF80_Write+0x64>)
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	21b4      	movs	r1, #180	; 0xb4
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <I2C_STHS34PF80_Write+0x60>)
 8000eda:	f7ff ff8d 	bl	8000df8 <LL_I2C_HandleTransfer>
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));		//waiting for release from queue
 8000ede:	bf00      	nop
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <I2C_STHS34PF80_Write+0x60>)
 8000ee2:	f7ff ff77 	bl	8000dd4 <LL_I2C_IsActiveFlag_TXE>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f9      	beq.n	8000ee0 <I2C_STHS34PF80_Write+0x40>
	LL_I2C_TransmitData8(I2C1, data);
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <I2C_STHS34PF80_Write+0x60>)
 8000ef2:	f7ff ffa7 	bl	8000e44 <LL_I2C_TransmitData8>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40005400 	.word	0x40005400
 8000f04:	80002000 	.word	0x80002000

08000f08 <I2C_STHS34PF80_Read>:

//------------------ I2C STHS34PF80 READ -------------------------------------------------------------------- I2C STHS34PF80 READ --------------------------------------------*/
void I2C_STHS34PF80_Read (uint8_t addr_reg)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	while (!LL_I2C_IsActiveFlag_TXE(I2C1)); 	//waiting for release from queue
 8000f12:	bf00      	nop
 8000f14:	4818      	ldr	r0, [pc, #96]	; (8000f78 <I2C_STHS34PF80_Read+0x70>)
 8000f16:	f7ff ff5d 	bl	8000dd4 <LL_I2C_IsActiveFlag_TXE>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f9      	beq.n	8000f14 <I2C_STHS34PF80_Read+0xc>
	LL_I2C_TransmitData8(I2C1, addr_reg);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4814      	ldr	r0, [pc, #80]	; (8000f78 <I2C_STHS34PF80_Read+0x70>)
 8000f26:	f7ff ff8d 	bl	8000e44 <LL_I2C_TransmitData8>
	LL_I2C_HandleTransfer(I2C1, SENSOR_ADDR<<1, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <I2C_STHS34PF80_Read+0x74>)
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	2200      	movs	r2, #0
 8000f38:	21b4      	movs	r1, #180	; 0xb4
 8000f3a:	480f      	ldr	r0, [pc, #60]	; (8000f78 <I2C_STHS34PF80_Read+0x70>)
 8000f3c:	f7ff ff5c 	bl	8000df8 <LL_I2C_HandleTransfer>
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));		//waiting for release from queue
 8000f40:	bf00      	nop
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <I2C_STHS34PF80_Read+0x70>)
 8000f44:	f7ff ff46 	bl	8000dd4 <LL_I2C_IsActiveFlag_TXE>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f9      	beq.n	8000f42 <I2C_STHS34PF80_Read+0x3a>

	LL_I2C_HandleTransfer(I2C1, SENSOR_ADDR<<1, LL_I2C_ADDRESSING_MODE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_RESTART_7BIT_READ);
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <I2C_STHS34PF80_Read+0x78>)
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	21b4      	movs	r1, #180	; 0xb4
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <I2C_STHS34PF80_Read+0x70>)
 8000f60:	f7ff ff4a 	bl	8000df8 <LL_I2C_HandleTransfer>
	printf("register = %d\n\r", addr_reg);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <I2C_STHS34PF80_Read+0x7c>)
 8000f6a:	f001 fb5b 	bl	8002624 <iprintf>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	80002000 	.word	0x80002000
 8000f80:	80002400 	.word	0x80002400
 8000f84:	08003548 	.word	0x08003548

08000f88 <I2C_STHS34PF80_Check_Activ_Tambient_Tobject>:

//------------------ I2C STHS34PF80 READ -------------------------------------------------------------------- I2C STHS34PF80 READ --------------------------------------------*/
uint8_t I2C_STHS34PF80_Check_Activ_Tambient_Tobject (void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));		//waiting for release from queue
 8000f8c:	bf00      	nop
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <I2C_STHS34PF80_Check_Activ_Tambient_Tobject+0x3c>)
 8000f90:	f7ff ff20 	bl	8000dd4 <LL_I2C_IsActiveFlag_TXE>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <I2C_STHS34PF80_Check_Activ_Tambient_Tobject+0x6>
	I2C_STHS34PF80_Read(STHS34PF80_CTRL1);
 8000f9a:	2020      	movs	r0, #32
 8000f9c:	f7ff ffb4 	bl	8000f08 <I2C_STHS34PF80_Read>
	while (!I2C_IsActiveFlag_RXNE);
 8000fa0:	bf00      	nop
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <I2C_STHS34PF80_Check_Activ_Tambient_Tobject+0x40>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0fb      	beq.n	8000fa2 <I2C_STHS34PF80_Check_Activ_Tambient_Tobject+0x1a>
	I2C_IsActiveFlag_RXNE = 0;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <I2C_STHS34PF80_Check_Activ_Tambient_Tobject+0x40>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	return ((READ_BIT(I2C_data_Rx, 4) == (4)) ? 1 : 0);
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <I2C_STHS34PF80_Check_Activ_Tambient_Tobject+0x44>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	109b      	asrs	r3, r3, #2
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	200000cd 	.word	0x200000cd
 8000fcc:	200000cc 	.word	0x200000cc

08000fd0 <I2C_STHS34PF80_Enabled_Tambient_Tobject>:

//------------------ I2C STHS34PF80 READ -------------------------------------------------------------------- I2C STHS34PF80 READ --------------------------------------------*/
void I2C_STHS34PF80_Enabled_Tambient_Tobject (void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	SET_BIT(data_reg.CTRL1, 4);
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <I2C_STHS34PF80_Enabled_Tambient_Tobject+0x30>)
 8000fd6:	795b      	ldrb	r3, [r3, #5]
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <I2C_STHS34PF80_Enabled_Tambient_Tobject+0x30>)
 8000fe0:	715a      	strb	r2, [r3, #5]
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));		//waiting for release from queue
 8000fe2:	bf00      	nop
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <I2C_STHS34PF80_Enabled_Tambient_Tobject+0x34>)
 8000fe6:	f7ff fef5 	bl	8000dd4 <LL_I2C_IsActiveFlag_TXE>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f9      	beq.n	8000fe4 <I2C_STHS34PF80_Enabled_Tambient_Tobject+0x14>
	I2C_STHS34PF80_Write(STHS34PF80_CTRL1,data_reg.CTRL1);
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <I2C_STHS34PF80_Enabled_Tambient_Tobject+0x30>)
 8000ff2:	795b      	ldrb	r3, [r3, #5]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	2020      	movs	r0, #32
 8000ff8:	f7ff ff52 	bl	8000ea0 <I2C_STHS34PF80_Write>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000008c 	.word	0x2000008c
 8001004:	40005400 	.word	0x40005400

08001008 <I2C_STHS34PF80_Disable_Tambient_Tobject>:

//------------------ I2C STHS34PF80 READ -------------------------------------------------------------------- I2C STHS34PF80 READ --------------------------------------------*/
void I2C_STHS34PF80_Disable_Tambient_Tobject (void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	CLEAR_BIT(data_reg.CTRL1, 4);
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <I2C_STHS34PF80_Disable_Tambient_Tobject+0x30>)
 800100e:	795b      	ldrb	r3, [r3, #5]
 8001010:	f023 0304 	bic.w	r3, r3, #4
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <I2C_STHS34PF80_Disable_Tambient_Tobject+0x30>)
 8001018:	715a      	strb	r2, [r3, #5]
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));		//waiting for release from queue
 800101a:	bf00      	nop
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <I2C_STHS34PF80_Disable_Tambient_Tobject+0x34>)
 800101e:	f7ff fed9 	bl	8000dd4 <LL_I2C_IsActiveFlag_TXE>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f9      	beq.n	800101c <I2C_STHS34PF80_Disable_Tambient_Tobject+0x14>
	I2C_STHS34PF80_Write(STHS34PF80_CTRL1,data_reg.CTRL1);
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <I2C_STHS34PF80_Disable_Tambient_Tobject+0x30>)
 800102a:	795b      	ldrb	r3, [r3, #5]
 800102c:	4619      	mov	r1, r3
 800102e:	2020      	movs	r0, #32
 8001030:	f7ff ff36 	bl	8000ea0 <I2C_STHS34PF80_Write>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000008c 	.word	0x2000008c
 800103c:	40005400 	.word	0x40005400

08001040 <I2C_STHS34PF80_Read_Tambient>:

//------------------ I2C STHS34PF80 READ -------------------------------------------------------------------- I2C STHS34PF80 READ --------------------------------------------*/
void I2C_STHS34PF80_Read_Tambient (void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	if (!I2C_STHS34PF80_Check_Activ_Tambient_Tobject())
 8001044:	f7ff ffa0 	bl	8000f88 <I2C_STHS34PF80_Check_Activ_Tambient_Tobject>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <I2C_STHS34PF80_Read_Tambient+0x12>
	I2C_STHS34PF80_Enabled_Tambient_Tobject();
 800104e:	f7ff ffbf 	bl	8000fd0 <I2C_STHS34PF80_Enabled_Tambient_Tobject>

	I2C_STHS34PF80_Read(STHS34PF80_TAMBIENT_L);
 8001052:	2028      	movs	r0, #40	; 0x28
 8001054:	f7ff ff58 	bl	8000f08 <I2C_STHS34PF80_Read>
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));		//waiting for release from queue
 8001058:	bf00      	nop
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <I2C_STHS34PF80_Read_Tambient+0x30>)
 800105c:	f7ff feba 	bl	8000dd4 <LL_I2C_IsActiveFlag_TXE>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f9      	beq.n	800105a <I2C_STHS34PF80_Read_Tambient+0x1a>
	I2C_STHS34PF80_Read(STHS34PF80_TAMBIENT_H);
 8001066:	2029      	movs	r0, #41	; 0x29
 8001068:	f7ff ff4e 	bl	8000f08 <I2C_STHS34PF80_Read>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40005400 	.word	0x40005400

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800107e:	b672      	cpsid	i
}
 8001080:	bf00      	nop
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__disable_irq();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x8>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 80010be:	f7ff f8af 	bl	8000220 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e00a      	b.n	80010ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010d8:	f3af 8000 	nop.w
 80010dc:	4601      	mov	r1, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	60ba      	str	r2, [r7, #8]
 80010e4:	b2ca      	uxtb	r2, r1
 80010e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dbf0      	blt.n	80010d8 <_read+0x12>
  }

  return len;
 80010f6:	687b      	ldr	r3, [r7, #4]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e009      	b.n	8001126 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	60ba      	str	r2, [r7, #8]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fa3e 	bl	800259c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	dbf1      	blt.n	8001112 <_write+0x12>
  }
  return len;
 800112e:	687b      	ldr	r3, [r7, #4]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_close>:

int _close(int file)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <_fstat>:

int _fstat(int file, struct stat *st)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115e:	605a      	str	r2, [r3, #4]
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <_isatty>:

int _isatty(int file)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f001 f9fa 	bl	80025c0 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20010000 	.word	0x20010000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000094 	.word	0x20000094
 8001200:	200000e0 	.word	0x200000e0

08001204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001212:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001214:	f7ff fff6 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <LoopForever+0x6>)
  ldr r1, =_edata
 800121a:	490d      	ldr	r1, [pc, #52]	; (8001250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <LoopForever+0xe>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001230:	4c0a      	ldr	r4, [pc, #40]	; (800125c <LoopForever+0x16>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800123e:	f001 f9c5 	bl	80025cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001242:	f000 fdab 	bl	8001d9c <main>

08001246 <LoopForever>:

LoopForever:
    b LoopForever
 8001246:	e7fe      	b.n	8001246 <LoopForever>
  ldr   r0, =_estack
 8001248:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001254:	080036c8 	.word	0x080036c8
  ldr r2, =_sbss
 8001258:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800125c:	200000e0 	.word	0x200000e0

08001260 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC_IRQHandler>
	...

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80012c8:	4904      	ldr	r1, [pc, #16]	; (80012dc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	58000400 	.word	0x58000400

080012e0 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <LL_PWR_EnableBkUpAccess+0x18>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a03      	ldr	r2, [pc, #12]	; (80012f8 <LL_PWR_EnableBkUpAccess+0x18>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	58000400 	.word	0x58000400

080012fc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800130c:	d101      	bne.n	8001312 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	58000400 	.word	0x58000400

08001320 <LL_RCC_HSE_EnableTcxo>:
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800132e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <LL_RCC_HSE_EnableDiv2>:
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800134a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <LL_RCC_HSE_DisableDiv2>:
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEPRE);
 800135c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001366:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001386:	d101      	bne.n	800138c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <LL_RCC_HSE_Enable>:
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800139a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <LL_RCC_HSE_Disable>:
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <LL_RCC_HSE_IsReady>:
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80013d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013e0:	d101      	bne.n	80013e6 <LL_RCC_HSE_IsReady+0x18>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <LL_RCC_HSE_IsReady+0x1a>
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <LL_RCC_HSI_Enable>:
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <LL_RCC_HSI_Disable>:
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800141a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <LL_RCC_HSI_IsReady>:
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800142c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	d101      	bne.n	8001440 <LL_RCC_HSI_IsReady+0x18>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <LL_RCC_HSI_IsReady+0x1a>
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <LL_RCC_HSI_SetCalibTrimming>:
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	061b      	lsls	r3, r3, #24
 8001460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <LL_RCC_LSE_Enable>:
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <LL_RCC_LSE_Disable>:
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <LL_RCC_LSE_SetDriveCapability>:
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	f023 0218 	bic.w	r2, r3, #24
 80014c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <LL_RCC_LSE_EnablePropagation>:
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80014e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <LL_RCC_LSE_IsReady>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b02      	cmp	r3, #2
 800150e:	d101      	bne.n	8001514 <LL_RCC_LSE_IsReady+0x18>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <LL_RCC_LSE_IsReady+0x1a>
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <LL_RCC_LSI_Enable>:
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <LL_RCC_LSI_Disable>:
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <LL_RCC_LSI_IsReady>:
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b02      	cmp	r3, #2
 8001570:	d101      	bne.n	8001576 <LL_RCC_LSI_IsReady+0x18>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_RCC_LSI_IsReady+0x1a>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <LL_RCC_MSI_Enable>:
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <LL_RCC_MSI_Disable>:
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <LL_RCC_MSI_IsReady>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d101      	bne.n	80015ce <LL_RCC_MSI_IsReady+0x16>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <LL_RCC_MSI_IsReady+0x18>
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d101      	bne.n	80015ee <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <LL_RCC_MSI_GetRange>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80015fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <LL_RCC_SetSysClkSource>:
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 0203 	bic.w	r2, r3, #3
 8001638:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <LL_RCC_GetSysClkSource>:
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <LL_RCC_SetAHBPrescaler>:
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800166a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <LL_RCC_SetAHB3Prescaler>:
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001698:	f023 020f 	bic.w	r2, r3, #15
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016a4:	4313      	orrs	r3, r2
 80016a6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <LL_RCC_SetAPB1Prescaler>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <LL_RCC_SetAPB2Prescaler>:
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <LL_RCC_ForceBackupDomainReset>:
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <LL_RCC_ReleaseBackupDomainReset>:
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <LL_RCC_PLL_Enable>:
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800176a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001778:	6013      	str	r3, [r2, #0]
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <LL_RCC_PLL_IsReady>:
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001794:	d101      	bne.n	800179a <LL_RCC_PLL_IsReady+0x18>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <LL_RCC_PLL_IsReady+0x1a>
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	4311      	orrs	r1, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	0212      	lsls	r2, r2, #8
 80017c6:	4311      	orrs	r1, r2
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	1fff808c 	.word	0x1fff808c

080017e4 <LL_RCC_PLL_GetN>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <LL_RCC_PLL_GetR>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <LL_RCC_PLL_GetDivider>:
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <LL_RCC_PLL_EnableDomain_SYS>:
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800182c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <LL_RCC_PLL_GetMainSource>:
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f003 0303 	and.w	r3, r3, #3
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <LL_FLASH_SetLatency+0x24>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 0207 	bic.w	r2, r3, #7
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <LL_FLASH_SetLatency+0x24>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	58004000 	.word	0x58004000

08001884 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <LL_FLASH_GetLatency+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	58004000 	.word	0x58004000

0800189c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d106      	bne.n	80018b8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <LL_SYSTICK_SetClkSource+0x34>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <LL_SYSTICK_SetClkSource+0x34>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80018b6:	e005      	b.n	80018c4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <LL_SYSTICK_SetClkSource+0x34>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <LL_SYSTICK_SetClkSource+0x34>)
 80018be:	f023 0304 	bic.w	r3, r3, #4
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <LL_SYSTICK_EnableIT+0x18>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <LL_SYSTICK_EnableIT+0x18>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <system_clock_config>:
//------------------ INCLUDE -------------------------------------------------------------------------------- INCLUDE --------------------------------------------------------*/
	#include "clock_conf.h"

//------------------ SYSTEM CLOCK CONFIG -------------------------------------------------------------------- SYSTEM CLOCK CONFIG --------------------------------------------*/
	void system_clock_config( void )
	{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
		/* declaration */
		//Clock USE
		uint8_t MSI = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	71fb      	strb	r3, [r7, #7]
		uint8_t HSI = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	71bb      	strb	r3, [r7, #6]
		uint8_t LSI = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	717b      	strb	r3, [r7, #5]
		uint8_t HSE = 1;
 8001902:	2301      	movs	r3, #1
 8001904:	713b      	strb	r3, [r7, #4]
		uint8_t LSE = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	70fb      	strb	r3, [r7, #3]
		uint8_t PLL = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	70bb      	strb	r3, [r7, #2]
		const bool useRegulatorVoltage2 = true;
 800190e:	2301      	movs	r3, #1
 8001910:	707b      	strb	r3, [r7, #1]
		#define Clock_Src  LL_RCC_SYS_CLKSOURCE_HSE


		//flash latency configuration
	    LL_FLASH_SetLatency( LL_FLASH_LATENCY_2 );
 8001912:	2002      	movs	r0, #2
 8001914:	f7ff ffa2 	bl	800185c <LL_FLASH_SetLatency>
	    while( LL_FLASH_GetLatency( ) != LL_FLASH_LATENCY_2 ){};
 8001918:	bf00      	nop
 800191a:	f7ff ffb3 	bl	8001884 <LL_FLASH_GetLatency>
 800191e:	4603      	mov	r3, r0
 8001920:	2b02      	cmp	r3, #2
 8001922:	d1fa      	bne.n	800191a <system_clock_config+0x2a>

	    //regulator voltage configuration
		LL_PWR_SetRegulVoltageScaling(useRegulatorVoltage2 ? LL_PWR_REGU_VOLTAGE_SCALE2 : LL_PWR_REGU_VOLTAGE_SCALE1); // latency 1 (1.2V) more MCU FREQ -> more CONSO or 2 (1.0V) less MCU FREQ -> less CONSO .
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <system_clock_config+0x40>
 800192a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192e:	e001      	b.n	8001934 <system_clock_config+0x44>
 8001930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fcbf 	bl	80012b8 <LL_PWR_SetRegulVoltageScaling>

		//HSE clock configuration and starting
		if (HSE==1)
 800193a:	793b      	ldrb	r3, [r7, #4]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d111      	bne.n	8001964 <system_clock_config+0x74>
		{
			if(useRegulatorVoltage2)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <system_clock_config+0x5c>
			{
				LL_RCC_HSE_EnableDiv2();
 8001946:	f7ff fcf9 	bl	800133c <LL_RCC_HSE_EnableDiv2>
 800194a:	e001      	b.n	8001950 <system_clock_config+0x60>
			}
			else
			{
				LL_RCC_HSE_DisableDiv2();
 800194c:	f7ff fd04 	bl	8001358 <LL_RCC_HSE_DisableDiv2>
			}
			LL_RCC_HSE_EnableTcxo(); // external Quartz TCXO specificity.
 8001950:	f7ff fce6 	bl	8001320 <LL_RCC_HSE_EnableTcxo>
			LL_RCC_HSE_Enable();
 8001954:	f7ff fd1f 	bl	8001396 <LL_RCC_HSE_Enable>
			while(LL_RCC_HSE_IsReady() == 0);
 8001958:	bf00      	nop
 800195a:	f7ff fd38 	bl	80013ce <LL_RCC_HSE_IsReady>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0fa      	beq.n	800195a <system_clock_config+0x6a>
		}

		//HSI clock configuration and starting
		if (HSI==1)
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10a      	bne.n	8001980 <system_clock_config+0x90>
		{
			LL_RCC_HSI_SetCalibTrimming(64);
 800196a:	2040      	movs	r0, #64	; 0x40
 800196c:	f7ff fd6d 	bl	800144a <LL_RCC_HSI_SetCalibTrimming>
			LL_RCC_HSI_Enable();
 8001970:	f7ff fd3e 	bl	80013f0 <LL_RCC_HSI_Enable>
			while(LL_RCC_HSI_IsReady() == 0);
 8001974:	bf00      	nop
 8001976:	f7ff fd57 	bl	8001428 <LL_RCC_HSI_IsReady>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0fa      	beq.n	8001976 <system_clock_config+0x86>
		}

		//MSI clock configuration and starting
		if (MSI==1)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <system_clock_config+0xa6>
		{
			LL_RCC_MSI_Enable();
 8001986:	f7ff fdfb 	bl	8001580 <LL_RCC_MSI_Enable>
			while(LL_RCC_MSI_IsReady() == 0);
 800198a:	bf00      	nop
 800198c:	f7ff fe14 	bl	80015b8 <LL_RCC_MSI_IsReady>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0fa      	beq.n	800198c <system_clock_config+0x9c>
		}

		//LSI clock configuration and starting
		if (LSI==1)
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d107      	bne.n	80019ac <system_clock_config+0xbc>
		{
			LL_RCC_LSI_Enable( );
 800199c:	f7ff fdbf 	bl	800151e <LL_RCC_LSI_Enable>
			while( LL_RCC_LSI_IsReady( ) == 0 );
 80019a0:	bf00      	nop
 80019a2:	f7ff fddc 	bl	800155e <LL_RCC_LSI_IsReady>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0fa      	beq.n	80019a2 <system_clock_config+0xb2>
		}

	    //PLL clock configuration and starting
		if (PLL==1)
 80019ac:	78bb      	ldrb	r3, [r7, #2]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d110      	bne.n	80019d4 <system_clock_config+0xe4>
		{
			LL_RCC_PLL_ConfigDomain_SYS( LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 6, LL_RCC_PLLR_DIV_6);
 80019b2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80019b6:	2206      	movs	r2, #6
 80019b8:	2100      	movs	r1, #0
 80019ba:	2003      	movs	r0, #3
 80019bc:	f7ff fef2 	bl	80017a4 <LL_RCC_PLL_ConfigDomain_SYS>
			LL_RCC_PLL_Enable( );
 80019c0:	f7ff fed1 	bl	8001766 <LL_RCC_PLL_Enable>
			LL_RCC_PLL_EnableDomain_SYS();
 80019c4:	f7ff ff30 	bl	8001828 <LL_RCC_PLL_EnableDomain_SYS>
			while( LL_RCC_PLL_IsReady( ) == 0 );
 80019c8:	bf00      	nop
 80019ca:	f7ff feda 	bl	8001782 <LL_RCC_PLL_IsReady>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0fa      	beq.n	80019ca <system_clock_config+0xda>
		}

		//Prescalers configuration
		LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fe44 	bl	8001662 <LL_RCC_SetAHBPrescaler>
		LL_RCC_SetAHB3Prescaler(LL_RCC_SYSCLK_DIV_1);
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fe54 	bl	8001688 <LL_RCC_SetAHB3Prescaler>
		LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fe67 	bl	80016b4 <LL_RCC_SetAPB1Prescaler>
		LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fe77 	bl	80016da <LL_RCC_SetAPB2Prescaler>

	    //set system clock
	    LL_RCC_SetSysClkSource( Clock_Src );
 80019ec:	2002      	movs	r0, #2
 80019ee:	f7ff fe1a 	bl	8001626 <LL_RCC_SetSysClkSource>
	    if((LL_RCC_GetSysClkSource() >> RCC_CFGR_SWS_Pos) == LL_RCC_SYS_CLKSOURCE_MSI)
 80019f2:	f7ff fe2b 	bl	800164c <LL_RCC_GetSysClkSource>
 80019f6:	4603      	mov	r3, r0
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d100      	bne.n	8001a00 <system_clock_config+0x110>
	    {
	    	while(1);
 80019fe:	e7fe      	b.n	80019fe <system_clock_config+0x10e>
	    }
		while((LL_RCC_GetSysClkSource() >> RCC_CFGR_SWS_Pos) != Clock_Src);
 8001a00:	bf00      	nop
 8001a02:	f7ff fe23 	bl	800164c <LL_RCC_GetSysClkSource>
 8001a06:	4603      	mov	r3, r0
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d1f9      	bne.n	8001a02 <system_clock_config+0x112>

	    //set HSI as clock source for wake-up from Stop mode
	    LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001a0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a12:	f7ff fe75 	bl	8001700 <LL_RCC_SetClkAfterWakeFromStop>

	    //enable Backup Domain
	    LL_PWR_EnableBkUpAccess( );
 8001a16:	f7ff fc63 	bl	80012e0 <LL_PWR_EnableBkUpAccess>
	    while(LL_PWR_IsEnabledBkUpAccess() == 0);
 8001a1a:	bf00      	nop
 8001a1c:	f7ff fc6e 	bl	80012fc <LL_PWR_IsEnabledBkUpAccess>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0fa      	beq.n	8001a1c <system_clock_config+0x12c>

	    // reset of Backup Domain
	    LL_RCC_ForceBackupDomainReset();
 8001a26:	f7ff fe7e 	bl	8001726 <LL_RCC_ForceBackupDomainReset>
	    LL_RCC_ReleaseBackupDomainReset();
 8001a2a:	f7ff fe8c 	bl	8001746 <LL_RCC_ReleaseBackupDomainReset>


	    //enable LSE
		if (LSE==1)
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10c      	bne.n	8001a4e <system_clock_config+0x15e>
		{
			LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fd3c 	bl	80014b2 <LL_RCC_LSE_SetDriveCapability>
			LL_RCC_LSE_EnablePropagation();
 8001a3a:	f7ff fd4f 	bl	80014dc <LL_RCC_LSE_EnablePropagation>
			LL_RCC_LSE_Enable();
 8001a3e:	f7ff fd18 	bl	8001472 <LL_RCC_LSE_Enable>
			while(LL_RCC_LSE_IsReady() == 0);
 8001a42:	bf00      	nop
 8001a44:	f7ff fd5a 	bl	80014fc <LL_RCC_LSE_IsReady>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0fa      	beq.n	8001a44 <system_clock_config+0x154>

	    //LL_RCC_SetRTCClockSource( LL_RCC_RTC_CLKSOURCE_LSE );
	    //LL_RCC_EnableRTC( );

	    //disable unused clocks
	    if (MSI==1)
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <system_clock_config+0x168>
	    	LL_RCC_MSI_Disable();
 8001a54:	f7ff fda2 	bl	800159c <LL_RCC_MSI_Disable>
	    if (HSI==1)
 8001a58:	79bb      	ldrb	r3, [r7, #6]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <system_clock_config+0x172>
	    	LL_RCC_HSI_Disable();
 8001a5e:	f7ff fcd5 	bl	800140c <LL_RCC_HSI_Disable>
	    if (LSI==1)
 8001a62:	797b      	ldrb	r3, [r7, #5]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <system_clock_config+0x17c>
			LL_RCC_LSI_Disable();
 8001a68:	f7ff fd69 	bl	800153e <LL_RCC_LSI_Disable>
	    if (HSE==1)
 8001a6c:	793b      	ldrb	r3, [r7, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <system_clock_config+0x186>
	    	LL_RCC_HSE_Disable();
 8001a72:	f7ff fc9e 	bl	80013b2 <LL_RCC_HSE_Disable>
	    if (LSE==1)
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <system_clock_config+0x190>
	    	LL_RCC_LSE_Disable();
 8001a7c:	f7ff fd09 	bl	8001492 <LL_RCC_LSE_Disable>
	}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <systick_conf>:

//------------------ SYSTICK CONF ---------------------------------------------------------------------------- SYSTICK CONF --------------------------------------------------*/
	void systick_conf (void)
	{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
		LL_Init1msTick(GetSystemClockFreq());
 8001a8c:	f000 f8ba 	bl	8001c04 <GetSystemClockFreq>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f982 	bl	8000d9c <LL_Init1msTick>
		LL_SetSystemCoreClock(GetSystemClockFreq());
 8001a98:	f000 f8b4 	bl	8001c04 <GetSystemClockFreq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f98a 	bl	8000db8 <LL_SetSystemCoreClock>
		LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f7ff fef9 	bl	800189c <LL_SYSTICK_SetClkSource>
		NVIC_SetPriority(SysTick_IRQn, TICK_INT_PRIORITY);
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab0:	f7ff fbd8 	bl	8001264 <__NVIC_SetPriority>
		LL_SYSTICK_EnableIT();
 8001ab4:	f7ff ff0e 	bl	80018d4 <LL_SYSTICK_EnableIT>
	}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <PLL_GetFreqDomain_SYS>:

//------------------ PLL GETFREQDOMAIM SYS ------------------------------------------------------------------- PLL GETFREQDOMAIM SYS -----------------------------------------*/
	uint32_t PLL_GetFreqDomain_SYS(void)
	{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
	  uint32_t pllsource;

	  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
	     SYSCLK = PLL_VCO / PLLR
	  */
	  pllsource = LL_RCC_PLL_GetMainSource();
 8001ac2:	f7ff febf 	bl	8001844 <LL_RCC_PLL_GetMainSource>
 8001ac6:	6038      	str	r0, [r7, #0]

	  switch (pllsource)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d03e      	beq.n	8001b4c <PLL_GetFreqDomain_SYS+0x90>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d846      	bhi.n	8001b62 <PLL_GetFreqDomain_SYS+0xa6>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d003      	beq.n	8001ae2 <PLL_GetFreqDomain_SYS+0x26>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d032      	beq.n	8001b46 <PLL_GetFreqDomain_SYS+0x8a>
 8001ae0:	e03f      	b.n	8001b62 <PLL_GetFreqDomain_SYS+0xa6>
	  {
	    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
	      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(), ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ? LL_RCC_MSI_GetRange() : LL_RCC_MSI_GetRangeAfterStandby()));
 8001ae2:	f7ff fd79 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d115      	bne.n	8001b18 <PLL_GetFreqDomain_SYS+0x5c>
 8001aec:	f7ff fd74 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d106      	bne.n	8001b04 <PLL_GetFreqDomain_SYS+0x48>
 8001af6:	f7ff fd7f 	bl	80015f8 <LL_RCC_MSI_GetRange>
 8001afa:	4603      	mov	r3, r0
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	e005      	b.n	8001b10 <PLL_GetFreqDomain_SYS+0x54>
 8001b04:	f7ff fd83 	bl	800160e <LL_RCC_MSI_GetRangeAfterStandby>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	4a39      	ldr	r2, [pc, #228]	; (8001bf8 <PLL_GetFreqDomain_SYS+0x13c>)
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	e014      	b.n	8001b42 <PLL_GetFreqDomain_SYS+0x86>
 8001b18:	f7ff fd5e 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d106      	bne.n	8001b30 <PLL_GetFreqDomain_SYS+0x74>
 8001b22:	f7ff fd69 	bl	80015f8 <LL_RCC_MSI_GetRange>
 8001b26:	4603      	mov	r3, r0
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	e005      	b.n	8001b3c <PLL_GetFreqDomain_SYS+0x80>
 8001b30:	f7ff fd6d 	bl	800160e <LL_RCC_MSI_GetRangeAfterStandby>
 8001b34:	4603      	mov	r3, r0
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	4a2e      	ldr	r2, [pc, #184]	; (8001bf8 <PLL_GetFreqDomain_SYS+0x13c>)
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	607b      	str	r3, [r7, #4]
	      break;
 8001b44:	e03f      	b.n	8001bc6 <PLL_GetFreqDomain_SYS+0x10a>

	    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
	      pllinputfreq = HSI_VALUE;
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <PLL_GetFreqDomain_SYS+0x140>)
 8001b48:	607b      	str	r3, [r7, #4]
	      break;
 8001b4a:	e03c      	b.n	8001bc6 <PLL_GetFreqDomain_SYS+0x10a>

	    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
	      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001b4c:	f7ff fc12 	bl	8001374 <LL_RCC_HSE_IsEnabledDiv2>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <PLL_GetFreqDomain_SYS+0xa0>
	      {
	        pllinputfreq = HSE_VALUE / 2U;
 8001b56:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <PLL_GetFreqDomain_SYS+0x140>)
 8001b58:	607b      	str	r3, [r7, #4]
	      }
	      else
	      {
	        pllinputfreq = HSE_VALUE;
	      }
	      break;
 8001b5a:	e034      	b.n	8001bc6 <PLL_GetFreqDomain_SYS+0x10a>
	        pllinputfreq = HSE_VALUE;
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <PLL_GetFreqDomain_SYS+0x144>)
 8001b5e:	607b      	str	r3, [r7, #4]
	      break;
 8001b60:	e031      	b.n	8001bc6 <PLL_GetFreqDomain_SYS+0x10a>


	    default:
	      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001b62:	f7ff fd39 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d115      	bne.n	8001b98 <PLL_GetFreqDomain_SYS+0xdc>
 8001b6c:	f7ff fd34 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d106      	bne.n	8001b84 <PLL_GetFreqDomain_SYS+0xc8>
 8001b76:	f7ff fd3f 	bl	80015f8 <LL_RCC_MSI_GetRange>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	e005      	b.n	8001b90 <PLL_GetFreqDomain_SYS+0xd4>
 8001b84:	f7ff fd43 	bl	800160e <LL_RCC_MSI_GetRangeAfterStandby>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <PLL_GetFreqDomain_SYS+0x13c>)
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	e014      	b.n	8001bc2 <PLL_GetFreqDomain_SYS+0x106>
 8001b98:	f7ff fd1e 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d106      	bne.n	8001bb0 <PLL_GetFreqDomain_SYS+0xf4>
 8001ba2:	f7ff fd29 	bl	80015f8 <LL_RCC_MSI_GetRange>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	e005      	b.n	8001bbc <PLL_GetFreqDomain_SYS+0x100>
 8001bb0:	f7ff fd2d 	bl	800160e <LL_RCC_MSI_GetRangeAfterStandby>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <PLL_GetFreqDomain_SYS+0x13c>)
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	607b      	str	r3, [r7, #4]
	                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
	                                             LL_RCC_MSI_GetRange() :
	                                             LL_RCC_MSI_GetRangeAfterStandby()));
	      break;
 8001bc4:	bf00      	nop
	  }
	  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001bc6:	f7ff fe0d 	bl	80017e4 <LL_RCC_PLL_GetN>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	fb03 f402 	mul.w	r4, r3, r2
 8001bd2:	f7ff fe1e 	bl	8001812 <LL_RCC_PLL_GetDivider>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	3301      	adds	r3, #1
 8001bdc:	fbb4 f4f3 	udiv	r4, r4, r3
 8001be0:	f7ff fe0c 	bl	80017fc <LL_RCC_PLL_GetR>
 8001be4:	4603      	mov	r3, r0
 8001be6:	0f5b      	lsrs	r3, r3, #29
 8001be8:	3301      	adds	r3, #1
 8001bea:	fbb4 f3f3 	udiv	r3, r4, r3
	                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
	}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd90      	pop	{r4, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	080035b8 	.word	0x080035b8
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	01e84800 	.word	0x01e84800

08001c04 <GetSystemClockFreq>:

//------------------ GETSYSTEMCLOCKFREQ ---------------------------------------------------------------------- GETSYSTEMCLOCKFREQ --------------------------------------------*/
	uint32_t GetSystemClockFreq(void)
	{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
	  uint32_t frequency;

	  /* Get SYSCLK source -------------------------------------------------------*/
	  switch (LL_RCC_GetSysClkSource())
 8001c0a:	f7ff fd1f 	bl	800164c <LL_RCC_GetSysClkSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d861      	bhi.n	8001cd8 <GetSystemClockFreq+0xd4>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <GetSystemClockFreq+0x18>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c51 	.word	0x08001c51
 8001c20:	08001cd9 	.word	0x08001cd9
 8001c24:	08001cd9 	.word	0x08001cd9
 8001c28:	08001cd9 	.word	0x08001cd9
 8001c2c:	08001cb5 	.word	0x08001cb5
 8001c30:	08001cd9 	.word	0x08001cd9
 8001c34:	08001cd9 	.word	0x08001cd9
 8001c38:	08001cd9 	.word	0x08001cd9
 8001c3c:	08001cbb 	.word	0x08001cbb
 8001c40:	08001cd9 	.word	0x08001cd9
 8001c44:	08001cd9 	.word	0x08001cd9
 8001c48:	08001cd9 	.word	0x08001cd9
 8001c4c:	08001cd1 	.word	0x08001cd1
	  {
	    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
	      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001c50:	f7ff fcc2 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d115      	bne.n	8001c86 <GetSystemClockFreq+0x82>
 8001c5a:	f7ff fcbd 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <GetSystemClockFreq+0x6e>
 8001c64:	f7ff fcc8 	bl	80015f8 <LL_RCC_MSI_GetRange>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	e005      	b.n	8001c7e <GetSystemClockFreq+0x7a>
 8001c72:	f7ff fccc 	bl	800160e <LL_RCC_MSI_GetRangeAfterStandby>
 8001c76:	4603      	mov	r3, r0
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <GetSystemClockFreq+0x144>)
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	e014      	b.n	8001cb0 <GetSystemClockFreq+0xac>
 8001c86:	f7ff fca7 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <GetSystemClockFreq+0x9a>
 8001c90:	f7ff fcb2 	bl	80015f8 <LL_RCC_MSI_GetRange>
 8001c94:	4603      	mov	r3, r0
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	e005      	b.n	8001caa <GetSystemClockFreq+0xa6>
 8001c9e:	f7ff fcb6 	bl	800160e <LL_RCC_MSI_GetRangeAfterStandby>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a27      	ldr	r2, [pc, #156]	; (8001d48 <GetSystemClockFreq+0x144>)
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	607b      	str	r3, [r7, #4]
	                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
	                                          LL_RCC_MSI_GetRange() :
	                                          LL_RCC_MSI_GetRangeAfterStandby()));
	      break;
 8001cb2:	e043      	b.n	8001d3c <GetSystemClockFreq+0x138>

	    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
	      frequency = HSI_VALUE;
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <GetSystemClockFreq+0x148>)
 8001cb6:	607b      	str	r3, [r7, #4]
	      break;
 8001cb8:	e040      	b.n	8001d3c <GetSystemClockFreq+0x138>

	    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
	      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001cba:	f7ff fb5b 	bl	8001374 <LL_RCC_HSE_IsEnabledDiv2>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <GetSystemClockFreq+0xc6>
	      {
	        frequency = HSE_VALUE / 2U;
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <GetSystemClockFreq+0x148>)
 8001cc6:	607b      	str	r3, [r7, #4]
	      }
	      else
	      {
	        frequency = HSE_VALUE;
	      }
	      break;
 8001cc8:	e038      	b.n	8001d3c <GetSystemClockFreq+0x138>
	        frequency = HSE_VALUE;
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <GetSystemClockFreq+0x14c>)
 8001ccc:	607b      	str	r3, [r7, #4]
	      break;
 8001cce:	e035      	b.n	8001d3c <GetSystemClockFreq+0x138>


	    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
	      frequency = PLL_GetFreqDomain_SYS();
 8001cd0:	f7ff fef4 	bl	8001abc <PLL_GetFreqDomain_SYS>
 8001cd4:	6078      	str	r0, [r7, #4]
	      break;
 8001cd6:	e031      	b.n	8001d3c <GetSystemClockFreq+0x138>

	    default:
	      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001cd8:	f7ff fc7e 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d115      	bne.n	8001d0e <GetSystemClockFreq+0x10a>
 8001ce2:	f7ff fc79 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <GetSystemClockFreq+0xf6>
 8001cec:	f7ff fc84 	bl	80015f8 <LL_RCC_MSI_GetRange>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	e005      	b.n	8001d06 <GetSystemClockFreq+0x102>
 8001cfa:	f7ff fc88 	bl	800160e <LL_RCC_MSI_GetRangeAfterStandby>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <GetSystemClockFreq+0x144>)
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	e014      	b.n	8001d38 <GetSystemClockFreq+0x134>
 8001d0e:	f7ff fc63 	bl	80015d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <GetSystemClockFreq+0x122>
 8001d18:	f7ff fc6e 	bl	80015f8 <LL_RCC_MSI_GetRange>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	e005      	b.n	8001d32 <GetSystemClockFreq+0x12e>
 8001d26:	f7ff fc72 	bl	800160e <LL_RCC_MSI_GetRangeAfterStandby>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <GetSystemClockFreq+0x144>)
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	607b      	str	r3, [r7, #4]
	                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
	                                          LL_RCC_MSI_GetRange() :
	                                          LL_RCC_MSI_GetRangeAfterStandby()));
	      break;
 8001d3a:	bf00      	nop
	  }

	  return frequency;
 8001d3c:	687b      	ldr	r3, [r7, #4]
	}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	080035b8 	.word	0x080035b8
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	01e84800 	.word	0x01e84800

08001d54 <__NVIC_SetPriorityGrouping>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <main>:
#define ON 	0
#define OFF 1

//------------------ MAIN FUNCTION -------------------------------------------------------------------------- MAIN FUNCTION --------------------------------------------------*/
	int main(void)
	{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
		/*Initialisation*/
		system_clock_config();
 8001da0:	f7ff fda6 	bl	80018f0 <system_clock_config>
		systick_conf();
 8001da4:	f7ff fe70 	bl	8001a88 <systick_conf>
		init_all_periph();
 8001da8:	f000 f814 	bl	8001dd4 <init_all_periph>

		NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f7ff ffd1 	bl	8001d54 <__NVIC_SetPriorityGrouping>

		while (1)
		{
			I2C_STHS34PF80_Disable_Tambient_Tobject();
 8001db2:	f7ff f929 	bl	8001008 <I2C_STHS34PF80_Disable_Tambient_Tobject>
			HAL_Delay(2);
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7fe fa4e 	bl	8000258 <HAL_Delay>
			I2C_STHS34PF80_Read_Tambient();
 8001dbc:	f7ff f940 	bl	8001040 <I2C_STHS34PF80_Read_Tambient>
			HAL_Delay(2);
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f7fe fa49 	bl	8000258 <HAL_Delay>
			I2C_STHS34PF80_Disable_Tambient_Tobject();
 8001dc6:	f7ff f91f 	bl	8001008 <I2C_STHS34PF80_Disable_Tambient_Tobject>
			HAL_Delay(10000);
 8001dca:	f242 7010 	movw	r0, #10000	; 0x2710
 8001dce:	f7fe fa43 	bl	8000258 <HAL_Delay>
			I2C_STHS34PF80_Disable_Tambient_Tobject();
 8001dd2:	e7ee      	b.n	8001db2 <main+0x16>

08001dd4 <init_all_periph>:
//------------------ INCLUDE -------------------------------------------------------------------------------- INCLUDE --------------------------------------------------------*/
	#include "periph_init.h"

//------------------ INIT ALL PERIPH ------------------------------------------------------------------------ INIT ALL PERIPH ------------------------------------------------*/
	void init_all_periph (void)
	{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af04      	add	r7, sp, #16
		#ifdef gpio
			gpio_init(0, LL_GPIO_PIN_0, 0, 0, 0, 0, LL_GPIO_AF_0);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	2300      	movs	r3, #0
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2300      	movs	r3, #0
 8001de8:	2200      	movs	r2, #0
 8001dea:	2101      	movs	r1, #1
 8001dec:	2000      	movs	r0, #0
 8001dee:	f000 f821 	bl	8001e34 <gpio_init>
		#ifdef usart1
			usart1_init();
		#endif

		#ifdef usart2
			usart2_init();
 8001df2:	f000 fb59 	bl	80024a8 <usart2_init>
		#endif

		#ifdef i2c
			i2c_init();
 8001df6:	f000 f999 	bl	800212c <i2c_init>
			I2C_STHS34PF80_Data_Reg_Init();
 8001dfa:	f7ff f831 	bl	8000e60 <I2C_STHS34PF80_Data_Reg_Init>
		#endif
	}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e28:	68fb      	ldr	r3, [r7, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <gpio_init>:
	 *         	@arg @ref LL_GPIO_AF_...
	 *         	@arg @ref LL_GPIO_AF_15
	 * @retval None */

	void gpio_init(GPIO_TypeDef * GPIOX, uint32_t pin, uint32_t mode, uint32_t pull, uint32_t speed, uint32_t outputtype, uint32_t alternate)
	{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
		#ifdef gpio
			/* gpio structure */
			GPIO_InitStruct.Pin   		= pin;
 8001e42:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <gpio_init+0x94>)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	6013      	str	r3, [r2, #0]
			GPIO_InitStruct.Mode  		= mode;
 8001e48:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <gpio_init+0x94>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6053      	str	r3, [r2, #4]
			GPIO_InitStruct.Pull  		= pull;
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <gpio_init+0x94>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6113      	str	r3, [r2, #16]
			GPIO_InitStruct.Speed 		= speed;
 8001e54:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <gpio_init+0x94>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	6093      	str	r3, [r2, #8]
			GPIO_InitStruct.OutputType 	= outputtype;
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <gpio_init+0x94>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	60d3      	str	r3, [r2, #12]
			GPIO_InitStruct.Alternate   = alternate;
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <gpio_init+0x94>)
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	6153      	str	r3, [r2, #20]

			if(GPIOX == GPIOA)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e6c:	d107      	bne.n	8001e7e <gpio_init+0x4a>
			{
				LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f7ff ffc8 	bl	8001e04 <LL_AHB2_GRP1_EnableClock>
				LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	4914      	ldr	r1, [pc, #80]	; (8001ec8 <gpio_init+0x94>)
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f7fe fb56 	bl	800052a <LL_GPIO_Init>
			}

			if(GPIOX == GPIOB)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <gpio_init+0x98>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d106      	bne.n	8001e94 <gpio_init+0x60>
			{
				LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001e86:	2002      	movs	r0, #2
 8001e88:	f7ff ffbc 	bl	8001e04 <LL_AHB2_GRP1_EnableClock>
				LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <gpio_init+0x94>)
 8001e8e:	480f      	ldr	r0, [pc, #60]	; (8001ecc <gpio_init+0x98>)
 8001e90:	f7fe fb4b 	bl	800052a <LL_GPIO_Init>
			}

			if(GPIOX == GPIOC)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <gpio_init+0x9c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d106      	bne.n	8001eaa <gpio_init+0x76>
			{
				LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001e9c:	2004      	movs	r0, #4
 8001e9e:	f7ff ffb1 	bl	8001e04 <LL_AHB2_GRP1_EnableClock>
				LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	4909      	ldr	r1, [pc, #36]	; (8001ec8 <gpio_init+0x94>)
 8001ea4:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <gpio_init+0x9c>)
 8001ea6:	f7fe fb40 	bl	800052a <LL_GPIO_Init>
			}

			if(GPIOX == GPIOH)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <gpio_init+0xa0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d106      	bne.n	8001ec0 <gpio_init+0x8c>
			{
				LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001eb2:	2080      	movs	r0, #128	; 0x80
 8001eb4:	f7ff ffa6 	bl	8001e04 <LL_AHB2_GRP1_EnableClock>
				LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <gpio_init+0x94>)
 8001eba:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <gpio_init+0xa0>)
 8001ebc:	f7fe fb35 	bl	800052a <LL_GPIO_Init>
			}
		#else
		#warning //you need to uncomente the  gpio define in "periph_init.h". If you want to use this function
		#endif
	}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000098 	.word	0x20000098
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48001c00 	.word	0x48001c00

08001ed8 <__NVIC_EnableIRQ>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4906      	ldr	r1, [pc, #24]	; (8001f0c <__NVIC_EnableIRQ+0x34>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	; (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db09      	blt.n	8001f8a <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8001f76:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <__NVIC_GetPriority+0x44>)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	e009      	b.n	8001f9e <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <__NVIC_GetPriority+0x48>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	b2db      	uxtb	r3, r3
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <LL_RCC_SetI2CClockSource>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	401a      	ands	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800200c:	68fb      	ldr	r3, [r7, #12]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	43db      	mvns	r3, r3
 800202a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202e:	4013      	ands	r3, r2
 8002030:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <LL_I2C_Disable>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 0201 	bic.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <LL_I2C_EnableClockStretching>:
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <LL_I2C_DisableGeneralCall>:
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <LL_I2C_DisableOwnAddress2>:
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60da      	str	r2, [r3, #12]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <LL_I2C_EnableIT_RX>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f043 0204 	orr.w	r2, r3, #4
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	601a      	str	r2, [r3, #0]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <LL_I2C_IsActiveFlag_RXNE>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d101      	bne.n	80020ea <LL_I2C_IsActiveFlag_RXNE+0x18>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <LL_I2C_EnableAutoEndMode>:
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	605a      	str	r2, [r3, #4]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <LL_I2C_ReceiveData8>:
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	b2db      	uxtb	r3, r3
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <i2c_init>:

	extern LL_I2C_InitTypeDef 	I2C_InitStruct;

//------------------ I2C INIT ------------------------------------------------------------------------------- I2C INIT -------------------------------------------------------*/
	void i2c_init(void)
	{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af04      	add	r7, sp, #16
			#warning //you need to uncomente the gpio define in "periph_init.h". If you want to use this function
		#endif

		/*gpio pin initialisation for I2C mode*/
			//I2C SCL Pin
			gpio_init(I2C_SCL_GPIO_Port, I2C_SCL_Pin, LL_GPIO_MODE_ALTERNATE, I2C_SCL_PULL, LL_GPIO_SPEED_FREQ_HIGH, I2C_SCL_OUTPUT, I2C_SCL_AF);
 8002132:	2304      	movs	r3, #4
 8002134:	9302      	str	r3, [sp, #8]
 8002136:	2301      	movs	r3, #1
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	2302      	movs	r3, #2
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	2202      	movs	r2, #2
 8002142:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214a:	f7ff fe73 	bl	8001e34 <gpio_init>

			//I2C SDA Pin
			gpio_init(I2C_SDA_GPIO_Port, I2C_SDA_Pin, LL_GPIO_MODE_ALTERNATE, I2C_SDA_PULL, LL_GPIO_SPEED_FREQ_HIGH, I2C_SDA_OUTPUT, I2C_SDA_AF);
 800214e:	2304      	movs	r3, #4
 8002150:	9302      	str	r3, [sp, #8]
 8002152:	2301      	movs	r3, #1
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	2302      	movs	r3, #2
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2301      	movs	r3, #1
 800215c:	2202      	movs	r2, #2
 800215e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002166:	f7ff fe65 	bl	8001e34 <gpio_init>

			//Disable/Reset I2C1
			LL_I2C_Disable(I2C1);
 800216a:	4823      	ldr	r0, [pc, #140]	; (80021f8 <i2c_init+0xcc>)
 800216c:	f7ff ff66 	bl	800203c <LL_I2C_Disable>

			//clock I2C conf
			LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002170:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002174:	f7ff ff50 	bl	8002018 <LL_APB1_GRP1_DisableClock>
			LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_SYSCLK);
 8002178:	4820      	ldr	r0, [pc, #128]	; (80021fc <i2c_init+0xd0>)
 800217a:	f7ff ff19 	bl	8001fb0 <LL_RCC_SetI2CClockSource>
			LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800217e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002182:	f7ff ff31 	bl	8001fe8 <LL_APB1_GRP1_EnableClock>

			I2C_InitStruct.PeripheralMode   = LL_I2C_MODE_I2C;
 8002186:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <i2c_init+0xd4>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
			I2C_InitStruct.Timing  			= 0x00707CBB;//0x00303D5B;
 800218c:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <i2c_init+0xd4>)
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <i2c_init+0xd8>)
 8002190:	605a      	str	r2, [r3, #4]
			I2C_InitStruct.AnalogFilter  	= LL_I2C_ANALOGFILTER_ENABLE;
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <i2c_init+0xd4>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
			I2C_InitStruct.DigitalFilter 	= 2;
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <i2c_init+0xd4>)
 800219a:	2202      	movs	r2, #2
 800219c:	60da      	str	r2, [r3, #12]
			I2C_InitStruct.OwnAddress1 		= 180;
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <i2c_init+0xd4>)
 80021a0:	22b4      	movs	r2, #180	; 0xb4
 80021a2:	611a      	str	r2, [r3, #16]
			I2C_InitStruct.TypeAcknowledge  = LL_I2C_NACK;
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <i2c_init+0xd4>)
 80021a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021aa:	615a      	str	r2, [r3, #20]
			I2C_InitStruct.OwnAddrSize		= LL_I2C_OWNADDRESS1_7BIT;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <i2c_init+0xd4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]

			LL_I2C_EnableAutoEndMode(I2C1);
 80021b2:	4811      	ldr	r0, [pc, #68]	; (80021f8 <i2c_init+0xcc>)
 80021b4:	f7ff ff9f 	bl	80020f6 <LL_I2C_EnableAutoEndMode>
			LL_I2C_DisableOwnAddress2(I2C1);
 80021b8:	480f      	ldr	r0, [pc, #60]	; (80021f8 <i2c_init+0xcc>)
 80021ba:	f7ff ff6c 	bl	8002096 <LL_I2C_DisableOwnAddress2>
			LL_I2C_DisableGeneralCall(I2C1);
 80021be:	480e      	ldr	r0, [pc, #56]	; (80021f8 <i2c_init+0xcc>)
 80021c0:	f7ff ff5a 	bl	8002078 <LL_I2C_DisableGeneralCall>
			LL_I2C_EnableClockStretching(I2C1);
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <i2c_init+0xcc>)
 80021c6:	f7ff ff48 	bl	800205a <LL_I2C_EnableClockStretching>
			uint32_t priority = NVIC_GetPriority(I2C1_EV_IRQn);
 80021ca:	201e      	movs	r0, #30
 80021cc:	f7ff feca 	bl	8001f64 <__NVIC_GetPriority>
 80021d0:	6078      	str	r0, [r7, #4]

	        NVIC_SetPriority(I2C1_EV_IRQn, priority);
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	201e      	movs	r0, #30
 80021d6:	f7ff fe9b 	bl	8001f10 <__NVIC_SetPriority>
	        NVIC_EnableIRQ(I2C1_EV_IRQn);
 80021da:	201e      	movs	r0, #30
 80021dc:	f7ff fe7c 	bl	8001ed8 <__NVIC_EnableIRQ>
	        LL_I2C_EnableIT_RX(I2C1);
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <i2c_init+0xcc>)
 80021e2:	f7ff ff67 	bl	80020b4 <LL_I2C_EnableIT_RX>

			LL_I2C_Init(I2C1,&I2C_InitStruct);
 80021e6:	4906      	ldr	r1, [pc, #24]	; (8002200 <i2c_init+0xd4>)
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <i2c_init+0xcc>)
 80021ea:	f7fe faac 	bl	8000746 <LL_I2C_Init>
		#else
			#warning //you need to uncomente the i2c define in "periph_init.h". If you want to use this function
		#endif
	}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40005400 	.word	0x40005400
 80021fc:	00030100 	.word	0x00030100
 8002200:	200000b0 	.word	0x200000b0
 8002204:	00707cbb 	.word	0x00707cbb

08002208 <I2C1_EV_IRQHandler>:

//------------------ I2C READ -------------------------------------------------------------------------------- I2C READ --------------------------------------------------------*/
	void I2C1_EV_IRQHandler (void)
	{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
		if (LL_I2C_IsActiveFlag_RXNE(I2C1))
 800220c:	4808      	ldr	r0, [pc, #32]	; (8002230 <I2C1_EV_IRQHandler+0x28>)
 800220e:	f7ff ff60 	bl	80020d2 <LL_I2C_IsActiveFlag_RXNE>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <I2C1_EV_IRQHandler+0x24>
		{
			I2C_IsActiveFlag_RXNE = 1;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <I2C1_EV_IRQHandler+0x2c>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
			I2C_data_Rx = LL_I2C_ReceiveData8(I2C1);				//read the data register
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <I2C1_EV_IRQHandler+0x28>)
 8002220:	f7ff ff78 	bl	8002114 <LL_I2C_ReceiveData8>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <I2C1_EV_IRQHandler+0x30>)
 800222a:	701a      	strb	r2, [r3, #0]
		}
	}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40005400 	.word	0x40005400
 8002234:	200000cd 	.word	0x200000cd
 8002238:	200000cc 	.word	0x200000cc

0800223c <LL_RCC_SetUSARTClockSource>:
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002248:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0c1b      	lsrs	r3, r3, #16
 8002250:	43db      	mvns	r3, r3
 8002252:	401a      	ands	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	b29b      	uxth	r3, r3
 8002258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <LL_APB1_GRP1_EnableClock>:
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002278:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800227a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4313      	orrs	r3, r2
 8002282:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002290:	68fb      	ldr	r3, [r7, #12]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <LL_APB1_GRP1_DisableClock>:
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022b2:	4013      	ands	r3, r2
 80022b4:	658b      	str	r3, [r1, #88]	; 0x58
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	601a      	str	r2, [r3, #0]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0201 	bic.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <LL_USART_SetTransferDirection>:
  *         @arg @ref LL_USART_DIRECTION_TX
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	e853 3f00 	ldrex	r3, [r3]
 8002310:	60bb      	str	r3, [r7, #8]
   return(result);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f023 030c 	bic.w	r3, r3, #12
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	61ba      	str	r2, [r7, #24]
 8002324:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002326:	6979      	ldr	r1, [r7, #20]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	e841 2300 	strex	r3, r2, [r1]
 800232e:	613b      	str	r3, [r7, #16]
   return(result);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e7      	bne.n	8002306 <LL_USART_SetTransferDirection+0xa>
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	3724      	adds	r7, #36	; 0x24
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <LL_USART_SetOverSampling>:
  *         @arg @ref LL_USART_OVERSAMPLING_16
  *         @arg @ref LL_USART_OVERSAMPLING_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <LL_USART_ConfigCharacter>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	430a      	orrs	r2, r1
 8002386:	431a      	orrs	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	431a      	orrs	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <LL_USART_SetRXPinLevel>:
  *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
  *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	605a      	str	r2, [r3, #4]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <LL_USART_SetTXPinLevel>:
  *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
  *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
	...

080023f0 <LL_USART_SetBaudRate>:
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                          uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  uint32_t usartdiv;
  uint32_t brrtemp;

  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0b      	cmp	r3, #11
 8002402:	d83c      	bhi.n	800247e <LL_USART_SetBaudRate+0x8e>
  {
    /* Do not overstep the size of USART_PRESCALER_TAB */
  }
  else if (BaudRate == 0U)
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d039      	beq.n	800247e <LL_USART_SetBaudRate+0x8e>
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002410:	d122      	bne.n	8002458 <LL_USART_SetBaudRate+0x68>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <LL_USART_SetBaudRate+0x98>)
 800241a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	005a      	lsls	r2, r3, #1
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	441a      	add	r2, r3
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	b29b      	uxth	r3, r3
 8002434:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	b29b      	uxth	r3, r3
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	60da      	str	r2, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
  }
}
 8002456:	e012      	b.n	800247e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <LL_USART_SetBaudRate+0x98>)
 8002460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	fbb2 f2f3 	udiv	r2, r2, r3
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	085b      	lsrs	r3, r3, #1
 800246e:	441a      	add	r2, r3
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	60da      	str	r2, [r3, #12]
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	080035f8 	.word	0x080035f8

0800248c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <usart2_init>:
	}

//------------------ USART2 INIT ----------------------------------------------------------------------------- USART2 INIT -----------------------------------------------------*/
	//@brief  Initialising USART2 with configuration in periph_init.h
	void usart2_init(void)
	{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af04      	add	r7, sp, #16
				#warning //you need to uncomente the gpio define in "periph_init.h". If you want to use this function
			#endif

			/*gpio pin initialisation for USART2 mode*/
				//TX mode
				gpio_init(USART2_TX_GPIO_Port, USART2_TX_Pin, LL_GPIO_MODE_ALTERNATE, USART2_TX_PULL, LL_GPIO_SPEED_FREQ_HIGH, USART2_TX_OUTPUT,USART2_TX_AF);
 80024ae:	2307      	movs	r3, #7
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	2300      	movs	r3, #0
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	2302      	movs	r3, #2
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2300      	movs	r3, #0
 80024bc:	2202      	movs	r2, #2
 80024be:	2104      	movs	r1, #4
 80024c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c4:	f7ff fcb6 	bl	8001e34 <gpio_init>

				//RX mode
				gpio_init(USART2_RX_GPIO_Port, USART2_RX_Pin, LL_GPIO_MODE_ALTERNATE, USART2_RX_PULL, LL_GPIO_SPEED_FREQ_HIGH, USART2_RX_OUTPUT,USART2_RX_AF);
 80024c8:	2307      	movs	r3, #7
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	2300      	movs	r3, #0
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2302      	movs	r3, #2
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2301      	movs	r3, #1
 80024d6:	2202      	movs	r2, #2
 80024d8:	2108      	movs	r1, #8
 80024da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024de:	f7ff fca9 	bl	8001e34 <gpio_init>

			//Disable/Reset USART2
			LL_USART_Disable(USART2);
 80024e2:	4821      	ldr	r0, [pc, #132]	; (8002568 <usart2_init+0xc0>)
 80024e4:	f7ff fefb 	bl	80022de <LL_USART_Disable>

			//clock uart conf
			LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_USART2);
 80024e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80024ec:	f7ff fed6 	bl	800229c <LL_APB1_GRP1_DisableClock>
			LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80024f0:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80024f4:	f7ff fea2 	bl	800223c <LL_RCC_SetUSARTClockSource>
			LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80024f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80024fc:	f7ff feb6 	bl	800226c <LL_APB1_GRP1_EnableClock>
			uint32_t freqClockUsed = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002500:	200c      	movs	r0, #12
 8002502:	f7fe fa21 	bl	8000948 <LL_RCC_GetUSARTClockFreq>
 8002506:	6078      	str	r0, [r7, #4]

			//uart conf
			LL_USART_SetTransferDirection(USART2, LL_USART_DIRECTION_TX_RX);
 8002508:	210c      	movs	r1, #12
 800250a:	4817      	ldr	r0, [pc, #92]	; (8002568 <usart2_init+0xc0>)
 800250c:	f7ff fef6 	bl	80022fc <LL_USART_SetTransferDirection>
			LL_USART_SetTXPinLevel(USART2, USART2_TX_PIN_LEVEL);
 8002510:	2100      	movs	r1, #0
 8002512:	4815      	ldr	r0, [pc, #84]	; (8002568 <usart2_init+0xc0>)
 8002514:	f7ff ff59 	bl	80023ca <LL_USART_SetTXPinLevel>
			LL_USART_SetRXPinLevel(USART2, USART2_RX_PIN_LEVEL);
 8002518:	2100      	movs	r1, #0
 800251a:	4813      	ldr	r0, [pc, #76]	; (8002568 <usart2_init+0xc0>)
 800251c:	f7ff ff43 	bl	80023a6 <LL_USART_SetRXPinLevel>
			LL_USART_ConfigCharacter(USART2, DATAWIDTH, PARITY, STOPBITS);
 8002520:	2300      	movs	r3, #0
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	4810      	ldr	r0, [pc, #64]	; (8002568 <usart2_init+0xc0>)
 8002528:	f7ff ff1d 	bl	8002366 <LL_USART_ConfigCharacter>

			// Set Baudrate
			uint32_t oversampling = ((BAUDRATE >= freqClockUsed/16) ? LL_USART_OVERSAMPLING_16 : LL_USART_OVERSAMPLING_8);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a0f      	ldr	r2, [pc, #60]	; (800256c <usart2_init+0xc4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d801      	bhi.n	8002538 <usart2_init+0x90>
 8002534:	2300      	movs	r3, #0
 8002536:	e001      	b.n	800253c <usart2_init+0x94>
 8002538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800253c:	603b      	str	r3, [r7, #0]
			LL_USART_SetOverSampling(USART2, oversampling);
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	4809      	ldr	r0, [pc, #36]	; (8002568 <usart2_init+0xc0>)
 8002542:	f7ff fefe 	bl	8002342 <LL_USART_SetOverSampling>
			LL_USART_SetBaudRate(USART2, freqClockUsed, LL_USART_PRESCALER_DIV1, oversampling, BAUDRATE);
 8002546:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2200      	movs	r2, #0
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <usart2_init+0xc0>)
 8002554:	f7ff ff4c 	bl	80023f0 <LL_USART_SetBaudRate>

			LL_USART_Enable(USART2);
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <usart2_init+0xc0>)
 800255a:	f7ff feb1 	bl	80022c0 <LL_USART_Enable>
		#else
			#warning //you need to uncomente the usart2 define in "periph_init.h". If you want to use this function
		#endif
	}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40004400 	.word	0x40004400
 800256c:	001c200f 	.word	0x001c200f

08002570 <char8B_usart_transmit>:
	 *         	@arg @ref LPUART1
	 *         	@arg @ref USART1
	 *         	@arg @ref USART2
	 * @retval None */
	void char8B_usart_transmit (USART_TypeDef *USARTx ,uint8_t character)
	{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
		while (READ_BIT(USARTx->ISR, USART_ISR_TC) == 0);
 800257c:	bf00      	nop
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f9      	beq.n	800257e <char8B_usart_transmit+0xe>
		LL_USART_TransmitData8(USARTx, character);
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ff7c 	bl	800248c <LL_USART_TransmitData8>
	}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <__io_putchar>:
//------------------ IO PUTCHAR ------------------------------------------------------------------------------ IO PUTCHAR ----------------------------------------------------*/
	/* printf function redirection */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	/* Warning this function can be define in an other folder ("syscalls"), so remove the function*/
	int __io_putchar(int ch)
	{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
		#else
			#warning //you need to uncomente the usart1 define in "periph_init.h". If you want to use this function
		#endif

		#ifdef usart2
		char8B_usart_transmit(USART2,ch);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4619      	mov	r1, r3
 80025aa:	4804      	ldr	r0, [pc, #16]	; (80025bc <__io_putchar+0x20>)
 80025ac:	f7ff ffe0 	bl	8002570 <char8B_usart_transmit>
		#else
			#warning //you need to uncomente the usart2 define in "periph_init.h". If you want to use this function
		#endif

		return ch;
 80025b0:	687b      	ldr	r3, [r7, #4]
	}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40004400 	.word	0x40004400

080025c0 <__errno>:
 80025c0:	4b01      	ldr	r3, [pc, #4]	; (80025c8 <__errno+0x8>)
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000008 	.word	0x20000008

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	4d0d      	ldr	r5, [pc, #52]	; (8002604 <__libc_init_array+0x38>)
 80025d0:	4c0d      	ldr	r4, [pc, #52]	; (8002608 <__libc_init_array+0x3c>)
 80025d2:	1b64      	subs	r4, r4, r5
 80025d4:	10a4      	asrs	r4, r4, #2
 80025d6:	2600      	movs	r6, #0
 80025d8:	42a6      	cmp	r6, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	4d0b      	ldr	r5, [pc, #44]	; (800260c <__libc_init_array+0x40>)
 80025de:	4c0c      	ldr	r4, [pc, #48]	; (8002610 <__libc_init_array+0x44>)
 80025e0:	f000 ffa6 	bl	8003530 <_init>
 80025e4:	1b64      	subs	r4, r4, r5
 80025e6:	10a4      	asrs	r4, r4, #2
 80025e8:	2600      	movs	r6, #0
 80025ea:	42a6      	cmp	r6, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f4:	4798      	blx	r3
 80025f6:	3601      	adds	r6, #1
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fe:	4798      	blx	r3
 8002600:	3601      	adds	r6, #1
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	080036c0 	.word	0x080036c0
 8002608:	080036c0 	.word	0x080036c0
 800260c:	080036c0 	.word	0x080036c0
 8002610:	080036c4 	.word	0x080036c4

08002614 <memset>:
 8002614:	4402      	add	r2, r0
 8002616:	4603      	mov	r3, r0
 8002618:	4293      	cmp	r3, r2
 800261a:	d100      	bne.n	800261e <memset+0xa>
 800261c:	4770      	bx	lr
 800261e:	f803 1b01 	strb.w	r1, [r3], #1
 8002622:	e7f9      	b.n	8002618 <memset+0x4>

08002624 <iprintf>:
 8002624:	b40f      	push	{r0, r1, r2, r3}
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <iprintf+0x2c>)
 8002628:	b513      	push	{r0, r1, r4, lr}
 800262a:	681c      	ldr	r4, [r3, #0]
 800262c:	b124      	cbz	r4, 8002638 <iprintf+0x14>
 800262e:	69a3      	ldr	r3, [r4, #24]
 8002630:	b913      	cbnz	r3, 8002638 <iprintf+0x14>
 8002632:	4620      	mov	r0, r4
 8002634:	f000 f866 	bl	8002704 <__sinit>
 8002638:	ab05      	add	r3, sp, #20
 800263a:	9a04      	ldr	r2, [sp, #16]
 800263c:	68a1      	ldr	r1, [r4, #8]
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	4620      	mov	r0, r4
 8002642:	f000 f9bb 	bl	80029bc <_vfiprintf_r>
 8002646:	b002      	add	sp, #8
 8002648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800264c:	b004      	add	sp, #16
 800264e:	4770      	bx	lr
 8002650:	20000008 	.word	0x20000008

08002654 <std>:
 8002654:	2300      	movs	r3, #0
 8002656:	b510      	push	{r4, lr}
 8002658:	4604      	mov	r4, r0
 800265a:	e9c0 3300 	strd	r3, r3, [r0]
 800265e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002662:	6083      	str	r3, [r0, #8]
 8002664:	8181      	strh	r1, [r0, #12]
 8002666:	6643      	str	r3, [r0, #100]	; 0x64
 8002668:	81c2      	strh	r2, [r0, #14]
 800266a:	6183      	str	r3, [r0, #24]
 800266c:	4619      	mov	r1, r3
 800266e:	2208      	movs	r2, #8
 8002670:	305c      	adds	r0, #92	; 0x5c
 8002672:	f7ff ffcf 	bl	8002614 <memset>
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <std+0x38>)
 8002678:	6263      	str	r3, [r4, #36]	; 0x24
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <std+0x3c>)
 800267c:	62a3      	str	r3, [r4, #40]	; 0x28
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <std+0x40>)
 8002680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <std+0x44>)
 8002684:	6224      	str	r4, [r4, #32]
 8002686:	6323      	str	r3, [r4, #48]	; 0x30
 8002688:	bd10      	pop	{r4, pc}
 800268a:	bf00      	nop
 800268c:	08002f65 	.word	0x08002f65
 8002690:	08002f87 	.word	0x08002f87
 8002694:	08002fbf 	.word	0x08002fbf
 8002698:	08002fe3 	.word	0x08002fe3

0800269c <_cleanup_r>:
 800269c:	4901      	ldr	r1, [pc, #4]	; (80026a4 <_cleanup_r+0x8>)
 800269e:	f000 b8af 	b.w	8002800 <_fwalk_reent>
 80026a2:	bf00      	nop
 80026a4:	080032b5 	.word	0x080032b5

080026a8 <__sfmoreglue>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	2268      	movs	r2, #104	; 0x68
 80026ac:	1e4d      	subs	r5, r1, #1
 80026ae:	4355      	muls	r5, r2
 80026b0:	460e      	mov	r6, r1
 80026b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026b6:	f000 f8e5 	bl	8002884 <_malloc_r>
 80026ba:	4604      	mov	r4, r0
 80026bc:	b140      	cbz	r0, 80026d0 <__sfmoreglue+0x28>
 80026be:	2100      	movs	r1, #0
 80026c0:	e9c0 1600 	strd	r1, r6, [r0]
 80026c4:	300c      	adds	r0, #12
 80026c6:	60a0      	str	r0, [r4, #8]
 80026c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026cc:	f7ff ffa2 	bl	8002614 <memset>
 80026d0:	4620      	mov	r0, r4
 80026d2:	bd70      	pop	{r4, r5, r6, pc}

080026d4 <__sfp_lock_acquire>:
 80026d4:	4801      	ldr	r0, [pc, #4]	; (80026dc <__sfp_lock_acquire+0x8>)
 80026d6:	f000 b8b3 	b.w	8002840 <__retarget_lock_acquire_recursive>
 80026da:	bf00      	nop
 80026dc:	200000cf 	.word	0x200000cf

080026e0 <__sfp_lock_release>:
 80026e0:	4801      	ldr	r0, [pc, #4]	; (80026e8 <__sfp_lock_release+0x8>)
 80026e2:	f000 b8ae 	b.w	8002842 <__retarget_lock_release_recursive>
 80026e6:	bf00      	nop
 80026e8:	200000cf 	.word	0x200000cf

080026ec <__sinit_lock_acquire>:
 80026ec:	4801      	ldr	r0, [pc, #4]	; (80026f4 <__sinit_lock_acquire+0x8>)
 80026ee:	f000 b8a7 	b.w	8002840 <__retarget_lock_acquire_recursive>
 80026f2:	bf00      	nop
 80026f4:	200000d0 	.word	0x200000d0

080026f8 <__sinit_lock_release>:
 80026f8:	4801      	ldr	r0, [pc, #4]	; (8002700 <__sinit_lock_release+0x8>)
 80026fa:	f000 b8a2 	b.w	8002842 <__retarget_lock_release_recursive>
 80026fe:	bf00      	nop
 8002700:	200000d0 	.word	0x200000d0

08002704 <__sinit>:
 8002704:	b510      	push	{r4, lr}
 8002706:	4604      	mov	r4, r0
 8002708:	f7ff fff0 	bl	80026ec <__sinit_lock_acquire>
 800270c:	69a3      	ldr	r3, [r4, #24]
 800270e:	b11b      	cbz	r3, 8002718 <__sinit+0x14>
 8002710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002714:	f7ff bff0 	b.w	80026f8 <__sinit_lock_release>
 8002718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800271c:	6523      	str	r3, [r4, #80]	; 0x50
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <__sinit+0x68>)
 8002720:	4a13      	ldr	r2, [pc, #76]	; (8002770 <__sinit+0x6c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	62a2      	str	r2, [r4, #40]	; 0x28
 8002726:	42a3      	cmp	r3, r4
 8002728:	bf04      	itt	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	61a3      	streq	r3, [r4, #24]
 800272e:	4620      	mov	r0, r4
 8002730:	f000 f820 	bl	8002774 <__sfp>
 8002734:	6060      	str	r0, [r4, #4]
 8002736:	4620      	mov	r0, r4
 8002738:	f000 f81c 	bl	8002774 <__sfp>
 800273c:	60a0      	str	r0, [r4, #8]
 800273e:	4620      	mov	r0, r4
 8002740:	f000 f818 	bl	8002774 <__sfp>
 8002744:	2200      	movs	r2, #0
 8002746:	60e0      	str	r0, [r4, #12]
 8002748:	2104      	movs	r1, #4
 800274a:	6860      	ldr	r0, [r4, #4]
 800274c:	f7ff ff82 	bl	8002654 <std>
 8002750:	68a0      	ldr	r0, [r4, #8]
 8002752:	2201      	movs	r2, #1
 8002754:	2109      	movs	r1, #9
 8002756:	f7ff ff7d 	bl	8002654 <std>
 800275a:	68e0      	ldr	r0, [r4, #12]
 800275c:	2202      	movs	r2, #2
 800275e:	2112      	movs	r1, #18
 8002760:	f7ff ff78 	bl	8002654 <std>
 8002764:	2301      	movs	r3, #1
 8002766:	61a3      	str	r3, [r4, #24]
 8002768:	e7d2      	b.n	8002710 <__sinit+0xc>
 800276a:	bf00      	nop
 800276c:	08003628 	.word	0x08003628
 8002770:	0800269d 	.word	0x0800269d

08002774 <__sfp>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	4607      	mov	r7, r0
 8002778:	f7ff ffac 	bl	80026d4 <__sfp_lock_acquire>
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <__sfp+0x84>)
 800277e:	681e      	ldr	r6, [r3, #0]
 8002780:	69b3      	ldr	r3, [r6, #24]
 8002782:	b913      	cbnz	r3, 800278a <__sfp+0x16>
 8002784:	4630      	mov	r0, r6
 8002786:	f7ff ffbd 	bl	8002704 <__sinit>
 800278a:	3648      	adds	r6, #72	; 0x48
 800278c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002790:	3b01      	subs	r3, #1
 8002792:	d503      	bpl.n	800279c <__sfp+0x28>
 8002794:	6833      	ldr	r3, [r6, #0]
 8002796:	b30b      	cbz	r3, 80027dc <__sfp+0x68>
 8002798:	6836      	ldr	r6, [r6, #0]
 800279a:	e7f7      	b.n	800278c <__sfp+0x18>
 800279c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027a0:	b9d5      	cbnz	r5, 80027d8 <__sfp+0x64>
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <__sfp+0x88>)
 80027a4:	60e3      	str	r3, [r4, #12]
 80027a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027aa:	6665      	str	r5, [r4, #100]	; 0x64
 80027ac:	f000 f847 	bl	800283e <__retarget_lock_init_recursive>
 80027b0:	f7ff ff96 	bl	80026e0 <__sfp_lock_release>
 80027b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80027b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027bc:	6025      	str	r5, [r4, #0]
 80027be:	61a5      	str	r5, [r4, #24]
 80027c0:	2208      	movs	r2, #8
 80027c2:	4629      	mov	r1, r5
 80027c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027c8:	f7ff ff24 	bl	8002614 <memset>
 80027cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027d4:	4620      	mov	r0, r4
 80027d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027d8:	3468      	adds	r4, #104	; 0x68
 80027da:	e7d9      	b.n	8002790 <__sfp+0x1c>
 80027dc:	2104      	movs	r1, #4
 80027de:	4638      	mov	r0, r7
 80027e0:	f7ff ff62 	bl	80026a8 <__sfmoreglue>
 80027e4:	4604      	mov	r4, r0
 80027e6:	6030      	str	r0, [r6, #0]
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d1d5      	bne.n	8002798 <__sfp+0x24>
 80027ec:	f7ff ff78 	bl	80026e0 <__sfp_lock_release>
 80027f0:	230c      	movs	r3, #12
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	e7ee      	b.n	80027d4 <__sfp+0x60>
 80027f6:	bf00      	nop
 80027f8:	08003628 	.word	0x08003628
 80027fc:	ffff0001 	.word	0xffff0001

08002800 <_fwalk_reent>:
 8002800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002804:	4606      	mov	r6, r0
 8002806:	4688      	mov	r8, r1
 8002808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800280c:	2700      	movs	r7, #0
 800280e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002812:	f1b9 0901 	subs.w	r9, r9, #1
 8002816:	d505      	bpl.n	8002824 <_fwalk_reent+0x24>
 8002818:	6824      	ldr	r4, [r4, #0]
 800281a:	2c00      	cmp	r4, #0
 800281c:	d1f7      	bne.n	800280e <_fwalk_reent+0xe>
 800281e:	4638      	mov	r0, r7
 8002820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002824:	89ab      	ldrh	r3, [r5, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d907      	bls.n	800283a <_fwalk_reent+0x3a>
 800282a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800282e:	3301      	adds	r3, #1
 8002830:	d003      	beq.n	800283a <_fwalk_reent+0x3a>
 8002832:	4629      	mov	r1, r5
 8002834:	4630      	mov	r0, r6
 8002836:	47c0      	blx	r8
 8002838:	4307      	orrs	r7, r0
 800283a:	3568      	adds	r5, #104	; 0x68
 800283c:	e7e9      	b.n	8002812 <_fwalk_reent+0x12>

0800283e <__retarget_lock_init_recursive>:
 800283e:	4770      	bx	lr

08002840 <__retarget_lock_acquire_recursive>:
 8002840:	4770      	bx	lr

08002842 <__retarget_lock_release_recursive>:
 8002842:	4770      	bx	lr

08002844 <sbrk_aligned>:
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	4e0e      	ldr	r6, [pc, #56]	; (8002880 <sbrk_aligned+0x3c>)
 8002848:	460c      	mov	r4, r1
 800284a:	6831      	ldr	r1, [r6, #0]
 800284c:	4605      	mov	r5, r0
 800284e:	b911      	cbnz	r1, 8002856 <sbrk_aligned+0x12>
 8002850:	f000 fb78 	bl	8002f44 <_sbrk_r>
 8002854:	6030      	str	r0, [r6, #0]
 8002856:	4621      	mov	r1, r4
 8002858:	4628      	mov	r0, r5
 800285a:	f000 fb73 	bl	8002f44 <_sbrk_r>
 800285e:	1c43      	adds	r3, r0, #1
 8002860:	d00a      	beq.n	8002878 <sbrk_aligned+0x34>
 8002862:	1cc4      	adds	r4, r0, #3
 8002864:	f024 0403 	bic.w	r4, r4, #3
 8002868:	42a0      	cmp	r0, r4
 800286a:	d007      	beq.n	800287c <sbrk_aligned+0x38>
 800286c:	1a21      	subs	r1, r4, r0
 800286e:	4628      	mov	r0, r5
 8002870:	f000 fb68 	bl	8002f44 <_sbrk_r>
 8002874:	3001      	adds	r0, #1
 8002876:	d101      	bne.n	800287c <sbrk_aligned+0x38>
 8002878:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800287c:	4620      	mov	r0, r4
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	200000d8 	.word	0x200000d8

08002884 <_malloc_r>:
 8002884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002888:	1ccd      	adds	r5, r1, #3
 800288a:	f025 0503 	bic.w	r5, r5, #3
 800288e:	3508      	adds	r5, #8
 8002890:	2d0c      	cmp	r5, #12
 8002892:	bf38      	it	cc
 8002894:	250c      	movcc	r5, #12
 8002896:	2d00      	cmp	r5, #0
 8002898:	4607      	mov	r7, r0
 800289a:	db01      	blt.n	80028a0 <_malloc_r+0x1c>
 800289c:	42a9      	cmp	r1, r5
 800289e:	d905      	bls.n	80028ac <_malloc_r+0x28>
 80028a0:	230c      	movs	r3, #12
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	2600      	movs	r6, #0
 80028a6:	4630      	mov	r0, r6
 80028a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ac:	4e2e      	ldr	r6, [pc, #184]	; (8002968 <_malloc_r+0xe4>)
 80028ae:	f000 fdb5 	bl	800341c <__malloc_lock>
 80028b2:	6833      	ldr	r3, [r6, #0]
 80028b4:	461c      	mov	r4, r3
 80028b6:	bb34      	cbnz	r4, 8002906 <_malloc_r+0x82>
 80028b8:	4629      	mov	r1, r5
 80028ba:	4638      	mov	r0, r7
 80028bc:	f7ff ffc2 	bl	8002844 <sbrk_aligned>
 80028c0:	1c43      	adds	r3, r0, #1
 80028c2:	4604      	mov	r4, r0
 80028c4:	d14d      	bne.n	8002962 <_malloc_r+0xde>
 80028c6:	6834      	ldr	r4, [r6, #0]
 80028c8:	4626      	mov	r6, r4
 80028ca:	2e00      	cmp	r6, #0
 80028cc:	d140      	bne.n	8002950 <_malloc_r+0xcc>
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	4631      	mov	r1, r6
 80028d2:	4638      	mov	r0, r7
 80028d4:	eb04 0803 	add.w	r8, r4, r3
 80028d8:	f000 fb34 	bl	8002f44 <_sbrk_r>
 80028dc:	4580      	cmp	r8, r0
 80028de:	d13a      	bne.n	8002956 <_malloc_r+0xd2>
 80028e0:	6821      	ldr	r1, [r4, #0]
 80028e2:	3503      	adds	r5, #3
 80028e4:	1a6d      	subs	r5, r5, r1
 80028e6:	f025 0503 	bic.w	r5, r5, #3
 80028ea:	3508      	adds	r5, #8
 80028ec:	2d0c      	cmp	r5, #12
 80028ee:	bf38      	it	cc
 80028f0:	250c      	movcc	r5, #12
 80028f2:	4629      	mov	r1, r5
 80028f4:	4638      	mov	r0, r7
 80028f6:	f7ff ffa5 	bl	8002844 <sbrk_aligned>
 80028fa:	3001      	adds	r0, #1
 80028fc:	d02b      	beq.n	8002956 <_malloc_r+0xd2>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	442b      	add	r3, r5
 8002902:	6023      	str	r3, [r4, #0]
 8002904:	e00e      	b.n	8002924 <_malloc_r+0xa0>
 8002906:	6822      	ldr	r2, [r4, #0]
 8002908:	1b52      	subs	r2, r2, r5
 800290a:	d41e      	bmi.n	800294a <_malloc_r+0xc6>
 800290c:	2a0b      	cmp	r2, #11
 800290e:	d916      	bls.n	800293e <_malloc_r+0xba>
 8002910:	1961      	adds	r1, r4, r5
 8002912:	42a3      	cmp	r3, r4
 8002914:	6025      	str	r5, [r4, #0]
 8002916:	bf18      	it	ne
 8002918:	6059      	strne	r1, [r3, #4]
 800291a:	6863      	ldr	r3, [r4, #4]
 800291c:	bf08      	it	eq
 800291e:	6031      	streq	r1, [r6, #0]
 8002920:	5162      	str	r2, [r4, r5]
 8002922:	604b      	str	r3, [r1, #4]
 8002924:	4638      	mov	r0, r7
 8002926:	f104 060b 	add.w	r6, r4, #11
 800292a:	f000 fd7d 	bl	8003428 <__malloc_unlock>
 800292e:	f026 0607 	bic.w	r6, r6, #7
 8002932:	1d23      	adds	r3, r4, #4
 8002934:	1af2      	subs	r2, r6, r3
 8002936:	d0b6      	beq.n	80028a6 <_malloc_r+0x22>
 8002938:	1b9b      	subs	r3, r3, r6
 800293a:	50a3      	str	r3, [r4, r2]
 800293c:	e7b3      	b.n	80028a6 <_malloc_r+0x22>
 800293e:	6862      	ldr	r2, [r4, #4]
 8002940:	42a3      	cmp	r3, r4
 8002942:	bf0c      	ite	eq
 8002944:	6032      	streq	r2, [r6, #0]
 8002946:	605a      	strne	r2, [r3, #4]
 8002948:	e7ec      	b.n	8002924 <_malloc_r+0xa0>
 800294a:	4623      	mov	r3, r4
 800294c:	6864      	ldr	r4, [r4, #4]
 800294e:	e7b2      	b.n	80028b6 <_malloc_r+0x32>
 8002950:	4634      	mov	r4, r6
 8002952:	6876      	ldr	r6, [r6, #4]
 8002954:	e7b9      	b.n	80028ca <_malloc_r+0x46>
 8002956:	230c      	movs	r3, #12
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4638      	mov	r0, r7
 800295c:	f000 fd64 	bl	8003428 <__malloc_unlock>
 8002960:	e7a1      	b.n	80028a6 <_malloc_r+0x22>
 8002962:	6025      	str	r5, [r4, #0]
 8002964:	e7de      	b.n	8002924 <_malloc_r+0xa0>
 8002966:	bf00      	nop
 8002968:	200000d4 	.word	0x200000d4

0800296c <__sfputc_r>:
 800296c:	6893      	ldr	r3, [r2, #8]
 800296e:	3b01      	subs	r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	b410      	push	{r4}
 8002974:	6093      	str	r3, [r2, #8]
 8002976:	da07      	bge.n	8002988 <__sfputc_r+0x1c>
 8002978:	6994      	ldr	r4, [r2, #24]
 800297a:	42a3      	cmp	r3, r4
 800297c:	db01      	blt.n	8002982 <__sfputc_r+0x16>
 800297e:	290a      	cmp	r1, #10
 8002980:	d102      	bne.n	8002988 <__sfputc_r+0x1c>
 8002982:	bc10      	pop	{r4}
 8002984:	f000 bb32 	b.w	8002fec <__swbuf_r>
 8002988:	6813      	ldr	r3, [r2, #0]
 800298a:	1c58      	adds	r0, r3, #1
 800298c:	6010      	str	r0, [r2, #0]
 800298e:	7019      	strb	r1, [r3, #0]
 8002990:	4608      	mov	r0, r1
 8002992:	bc10      	pop	{r4}
 8002994:	4770      	bx	lr

08002996 <__sfputs_r>:
 8002996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002998:	4606      	mov	r6, r0
 800299a:	460f      	mov	r7, r1
 800299c:	4614      	mov	r4, r2
 800299e:	18d5      	adds	r5, r2, r3
 80029a0:	42ac      	cmp	r4, r5
 80029a2:	d101      	bne.n	80029a8 <__sfputs_r+0x12>
 80029a4:	2000      	movs	r0, #0
 80029a6:	e007      	b.n	80029b8 <__sfputs_r+0x22>
 80029a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ac:	463a      	mov	r2, r7
 80029ae:	4630      	mov	r0, r6
 80029b0:	f7ff ffdc 	bl	800296c <__sfputc_r>
 80029b4:	1c43      	adds	r3, r0, #1
 80029b6:	d1f3      	bne.n	80029a0 <__sfputs_r+0xa>
 80029b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029bc <_vfiprintf_r>:
 80029bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c0:	460d      	mov	r5, r1
 80029c2:	b09d      	sub	sp, #116	; 0x74
 80029c4:	4614      	mov	r4, r2
 80029c6:	4698      	mov	r8, r3
 80029c8:	4606      	mov	r6, r0
 80029ca:	b118      	cbz	r0, 80029d4 <_vfiprintf_r+0x18>
 80029cc:	6983      	ldr	r3, [r0, #24]
 80029ce:	b90b      	cbnz	r3, 80029d4 <_vfiprintf_r+0x18>
 80029d0:	f7ff fe98 	bl	8002704 <__sinit>
 80029d4:	4b89      	ldr	r3, [pc, #548]	; (8002bfc <_vfiprintf_r+0x240>)
 80029d6:	429d      	cmp	r5, r3
 80029d8:	d11b      	bne.n	8002a12 <_vfiprintf_r+0x56>
 80029da:	6875      	ldr	r5, [r6, #4]
 80029dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029de:	07d9      	lsls	r1, r3, #31
 80029e0:	d405      	bmi.n	80029ee <_vfiprintf_r+0x32>
 80029e2:	89ab      	ldrh	r3, [r5, #12]
 80029e4:	059a      	lsls	r2, r3, #22
 80029e6:	d402      	bmi.n	80029ee <_vfiprintf_r+0x32>
 80029e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029ea:	f7ff ff29 	bl	8002840 <__retarget_lock_acquire_recursive>
 80029ee:	89ab      	ldrh	r3, [r5, #12]
 80029f0:	071b      	lsls	r3, r3, #28
 80029f2:	d501      	bpl.n	80029f8 <_vfiprintf_r+0x3c>
 80029f4:	692b      	ldr	r3, [r5, #16]
 80029f6:	b9eb      	cbnz	r3, 8002a34 <_vfiprintf_r+0x78>
 80029f8:	4629      	mov	r1, r5
 80029fa:	4630      	mov	r0, r6
 80029fc:	f000 fb5a 	bl	80030b4 <__swsetup_r>
 8002a00:	b1c0      	cbz	r0, 8002a34 <_vfiprintf_r+0x78>
 8002a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a04:	07dc      	lsls	r4, r3, #31
 8002a06:	d50e      	bpl.n	8002a26 <_vfiprintf_r+0x6a>
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a0c:	b01d      	add	sp, #116	; 0x74
 8002a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a12:	4b7b      	ldr	r3, [pc, #492]	; (8002c00 <_vfiprintf_r+0x244>)
 8002a14:	429d      	cmp	r5, r3
 8002a16:	d101      	bne.n	8002a1c <_vfiprintf_r+0x60>
 8002a18:	68b5      	ldr	r5, [r6, #8]
 8002a1a:	e7df      	b.n	80029dc <_vfiprintf_r+0x20>
 8002a1c:	4b79      	ldr	r3, [pc, #484]	; (8002c04 <_vfiprintf_r+0x248>)
 8002a1e:	429d      	cmp	r5, r3
 8002a20:	bf08      	it	eq
 8002a22:	68f5      	ldreq	r5, [r6, #12]
 8002a24:	e7da      	b.n	80029dc <_vfiprintf_r+0x20>
 8002a26:	89ab      	ldrh	r3, [r5, #12]
 8002a28:	0598      	lsls	r0, r3, #22
 8002a2a:	d4ed      	bmi.n	8002a08 <_vfiprintf_r+0x4c>
 8002a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a2e:	f7ff ff08 	bl	8002842 <__retarget_lock_release_recursive>
 8002a32:	e7e9      	b.n	8002a08 <_vfiprintf_r+0x4c>
 8002a34:	2300      	movs	r3, #0
 8002a36:	9309      	str	r3, [sp, #36]	; 0x24
 8002a38:	2320      	movs	r3, #32
 8002a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a42:	2330      	movs	r3, #48	; 0x30
 8002a44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002c08 <_vfiprintf_r+0x24c>
 8002a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a4c:	f04f 0901 	mov.w	r9, #1
 8002a50:	4623      	mov	r3, r4
 8002a52:	469a      	mov	sl, r3
 8002a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a58:	b10a      	cbz	r2, 8002a5e <_vfiprintf_r+0xa2>
 8002a5a:	2a25      	cmp	r2, #37	; 0x25
 8002a5c:	d1f9      	bne.n	8002a52 <_vfiprintf_r+0x96>
 8002a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8002a62:	d00b      	beq.n	8002a7c <_vfiprintf_r+0xc0>
 8002a64:	465b      	mov	r3, fp
 8002a66:	4622      	mov	r2, r4
 8002a68:	4629      	mov	r1, r5
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	f7ff ff93 	bl	8002996 <__sfputs_r>
 8002a70:	3001      	adds	r0, #1
 8002a72:	f000 80aa 	beq.w	8002bca <_vfiprintf_r+0x20e>
 8002a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a78:	445a      	add	r2, fp
 8002a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8002a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a2 	beq.w	8002bca <_vfiprintf_r+0x20e>
 8002a86:	2300      	movs	r3, #0
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a90:	f10a 0a01 	add.w	sl, sl, #1
 8002a94:	9304      	str	r3, [sp, #16]
 8002a96:	9307      	str	r3, [sp, #28]
 8002a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8002a9e:	4654      	mov	r4, sl
 8002aa0:	2205      	movs	r2, #5
 8002aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aa6:	4858      	ldr	r0, [pc, #352]	; (8002c08 <_vfiprintf_r+0x24c>)
 8002aa8:	f7fd fb6a 	bl	8000180 <memchr>
 8002aac:	9a04      	ldr	r2, [sp, #16]
 8002aae:	b9d8      	cbnz	r0, 8002ae8 <_vfiprintf_r+0x12c>
 8002ab0:	06d1      	lsls	r1, r2, #27
 8002ab2:	bf44      	itt	mi
 8002ab4:	2320      	movmi	r3, #32
 8002ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002aba:	0713      	lsls	r3, r2, #28
 8002abc:	bf44      	itt	mi
 8002abe:	232b      	movmi	r3, #43	; 0x2b
 8002ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8002aca:	d015      	beq.n	8002af8 <_vfiprintf_r+0x13c>
 8002acc:	9a07      	ldr	r2, [sp, #28]
 8002ace:	4654      	mov	r4, sl
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f04f 0c0a 	mov.w	ip, #10
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002adc:	3b30      	subs	r3, #48	; 0x30
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	d94e      	bls.n	8002b80 <_vfiprintf_r+0x1c4>
 8002ae2:	b1b0      	cbz	r0, 8002b12 <_vfiprintf_r+0x156>
 8002ae4:	9207      	str	r2, [sp, #28]
 8002ae6:	e014      	b.n	8002b12 <_vfiprintf_r+0x156>
 8002ae8:	eba0 0308 	sub.w	r3, r0, r8
 8002aec:	fa09 f303 	lsl.w	r3, r9, r3
 8002af0:	4313      	orrs	r3, r2
 8002af2:	9304      	str	r3, [sp, #16]
 8002af4:	46a2      	mov	sl, r4
 8002af6:	e7d2      	b.n	8002a9e <_vfiprintf_r+0xe2>
 8002af8:	9b03      	ldr	r3, [sp, #12]
 8002afa:	1d19      	adds	r1, r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	9103      	str	r1, [sp, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bfbb      	ittet	lt
 8002b04:	425b      	neglt	r3, r3
 8002b06:	f042 0202 	orrlt.w	r2, r2, #2
 8002b0a:	9307      	strge	r3, [sp, #28]
 8002b0c:	9307      	strlt	r3, [sp, #28]
 8002b0e:	bfb8      	it	lt
 8002b10:	9204      	strlt	r2, [sp, #16]
 8002b12:	7823      	ldrb	r3, [r4, #0]
 8002b14:	2b2e      	cmp	r3, #46	; 0x2e
 8002b16:	d10c      	bne.n	8002b32 <_vfiprintf_r+0x176>
 8002b18:	7863      	ldrb	r3, [r4, #1]
 8002b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b1c:	d135      	bne.n	8002b8a <_vfiprintf_r+0x1ce>
 8002b1e:	9b03      	ldr	r3, [sp, #12]
 8002b20:	1d1a      	adds	r2, r3, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	9203      	str	r2, [sp, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bfb8      	it	lt
 8002b2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002b2e:	3402      	adds	r4, #2
 8002b30:	9305      	str	r3, [sp, #20]
 8002b32:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002c0c <_vfiprintf_r+0x250>
 8002b36:	7821      	ldrb	r1, [r4, #0]
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4650      	mov	r0, sl
 8002b3c:	f7fd fb20 	bl	8000180 <memchr>
 8002b40:	b140      	cbz	r0, 8002b54 <_vfiprintf_r+0x198>
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	eba0 000a 	sub.w	r0, r0, sl
 8002b48:	fa03 f000 	lsl.w	r0, r3, r0
 8002b4c:	9b04      	ldr	r3, [sp, #16]
 8002b4e:	4303      	orrs	r3, r0
 8002b50:	3401      	adds	r4, #1
 8002b52:	9304      	str	r3, [sp, #16]
 8002b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b58:	482d      	ldr	r0, [pc, #180]	; (8002c10 <_vfiprintf_r+0x254>)
 8002b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b5e:	2206      	movs	r2, #6
 8002b60:	f7fd fb0e 	bl	8000180 <memchr>
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d03f      	beq.n	8002be8 <_vfiprintf_r+0x22c>
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <_vfiprintf_r+0x258>)
 8002b6a:	bb1b      	cbnz	r3, 8002bb4 <_vfiprintf_r+0x1f8>
 8002b6c:	9b03      	ldr	r3, [sp, #12]
 8002b6e:	3307      	adds	r3, #7
 8002b70:	f023 0307 	bic.w	r3, r3, #7
 8002b74:	3308      	adds	r3, #8
 8002b76:	9303      	str	r3, [sp, #12]
 8002b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b7a:	443b      	add	r3, r7
 8002b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b7e:	e767      	b.n	8002a50 <_vfiprintf_r+0x94>
 8002b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b84:	460c      	mov	r4, r1
 8002b86:	2001      	movs	r0, #1
 8002b88:	e7a5      	b.n	8002ad6 <_vfiprintf_r+0x11a>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	3401      	adds	r4, #1
 8002b8e:	9305      	str	r3, [sp, #20]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f04f 0c0a 	mov.w	ip, #10
 8002b96:	4620      	mov	r0, r4
 8002b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b9c:	3a30      	subs	r2, #48	; 0x30
 8002b9e:	2a09      	cmp	r2, #9
 8002ba0:	d903      	bls.n	8002baa <_vfiprintf_r+0x1ee>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0c5      	beq.n	8002b32 <_vfiprintf_r+0x176>
 8002ba6:	9105      	str	r1, [sp, #20]
 8002ba8:	e7c3      	b.n	8002b32 <_vfiprintf_r+0x176>
 8002baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bae:	4604      	mov	r4, r0
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e7f0      	b.n	8002b96 <_vfiprintf_r+0x1da>
 8002bb4:	ab03      	add	r3, sp, #12
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	462a      	mov	r2, r5
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <_vfiprintf_r+0x25c>)
 8002bbc:	a904      	add	r1, sp, #16
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f3af 8000 	nop.w
 8002bc4:	4607      	mov	r7, r0
 8002bc6:	1c78      	adds	r0, r7, #1
 8002bc8:	d1d6      	bne.n	8002b78 <_vfiprintf_r+0x1bc>
 8002bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bcc:	07d9      	lsls	r1, r3, #31
 8002bce:	d405      	bmi.n	8002bdc <_vfiprintf_r+0x220>
 8002bd0:	89ab      	ldrh	r3, [r5, #12]
 8002bd2:	059a      	lsls	r2, r3, #22
 8002bd4:	d402      	bmi.n	8002bdc <_vfiprintf_r+0x220>
 8002bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bd8:	f7ff fe33 	bl	8002842 <__retarget_lock_release_recursive>
 8002bdc:	89ab      	ldrh	r3, [r5, #12]
 8002bde:	065b      	lsls	r3, r3, #25
 8002be0:	f53f af12 	bmi.w	8002a08 <_vfiprintf_r+0x4c>
 8002be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002be6:	e711      	b.n	8002a0c <_vfiprintf_r+0x50>
 8002be8:	ab03      	add	r3, sp, #12
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	462a      	mov	r2, r5
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <_vfiprintf_r+0x25c>)
 8002bf0:	a904      	add	r1, sp, #16
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	f000 f880 	bl	8002cf8 <_printf_i>
 8002bf8:	e7e4      	b.n	8002bc4 <_vfiprintf_r+0x208>
 8002bfa:	bf00      	nop
 8002bfc:	0800364c 	.word	0x0800364c
 8002c00:	0800366c 	.word	0x0800366c
 8002c04:	0800362c 	.word	0x0800362c
 8002c08:	0800368c 	.word	0x0800368c
 8002c0c:	08003692 	.word	0x08003692
 8002c10:	08003696 	.word	0x08003696
 8002c14:	00000000 	.word	0x00000000
 8002c18:	08002997 	.word	0x08002997

08002c1c <_printf_common>:
 8002c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c20:	4616      	mov	r6, r2
 8002c22:	4699      	mov	r9, r3
 8002c24:	688a      	ldr	r2, [r1, #8]
 8002c26:	690b      	ldr	r3, [r1, #16]
 8002c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	bfb8      	it	lt
 8002c30:	4613      	movlt	r3, r2
 8002c32:	6033      	str	r3, [r6, #0]
 8002c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c38:	4607      	mov	r7, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	b10a      	cbz	r2, 8002c42 <_printf_common+0x26>
 8002c3e:	3301      	adds	r3, #1
 8002c40:	6033      	str	r3, [r6, #0]
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	0699      	lsls	r1, r3, #26
 8002c46:	bf42      	ittt	mi
 8002c48:	6833      	ldrmi	r3, [r6, #0]
 8002c4a:	3302      	addmi	r3, #2
 8002c4c:	6033      	strmi	r3, [r6, #0]
 8002c4e:	6825      	ldr	r5, [r4, #0]
 8002c50:	f015 0506 	ands.w	r5, r5, #6
 8002c54:	d106      	bne.n	8002c64 <_printf_common+0x48>
 8002c56:	f104 0a19 	add.w	sl, r4, #25
 8002c5a:	68e3      	ldr	r3, [r4, #12]
 8002c5c:	6832      	ldr	r2, [r6, #0]
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	42ab      	cmp	r3, r5
 8002c62:	dc26      	bgt.n	8002cb2 <_printf_common+0x96>
 8002c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c68:	1e13      	subs	r3, r2, #0
 8002c6a:	6822      	ldr	r2, [r4, #0]
 8002c6c:	bf18      	it	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	0692      	lsls	r2, r2, #26
 8002c72:	d42b      	bmi.n	8002ccc <_printf_common+0xb0>
 8002c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c78:	4649      	mov	r1, r9
 8002c7a:	4638      	mov	r0, r7
 8002c7c:	47c0      	blx	r8
 8002c7e:	3001      	adds	r0, #1
 8002c80:	d01e      	beq.n	8002cc0 <_printf_common+0xa4>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	68e5      	ldr	r5, [r4, #12]
 8002c86:	6832      	ldr	r2, [r6, #0]
 8002c88:	f003 0306 	and.w	r3, r3, #6
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	bf08      	it	eq
 8002c90:	1aad      	subeq	r5, r5, r2
 8002c92:	68a3      	ldr	r3, [r4, #8]
 8002c94:	6922      	ldr	r2, [r4, #16]
 8002c96:	bf0c      	ite	eq
 8002c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c9c:	2500      	movne	r5, #0
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bfc4      	itt	gt
 8002ca2:	1a9b      	subgt	r3, r3, r2
 8002ca4:	18ed      	addgt	r5, r5, r3
 8002ca6:	2600      	movs	r6, #0
 8002ca8:	341a      	adds	r4, #26
 8002caa:	42b5      	cmp	r5, r6
 8002cac:	d11a      	bne.n	8002ce4 <_printf_common+0xc8>
 8002cae:	2000      	movs	r0, #0
 8002cb0:	e008      	b.n	8002cc4 <_printf_common+0xa8>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	4652      	mov	r2, sl
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	4638      	mov	r0, r7
 8002cba:	47c0      	blx	r8
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	d103      	bne.n	8002cc8 <_printf_common+0xac>
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc8:	3501      	adds	r5, #1
 8002cca:	e7c6      	b.n	8002c5a <_printf_common+0x3e>
 8002ccc:	18e1      	adds	r1, r4, r3
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	2030      	movs	r0, #48	; 0x30
 8002cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cd6:	4422      	add	r2, r4
 8002cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	e7c7      	b.n	8002c74 <_printf_common+0x58>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	4649      	mov	r1, r9
 8002cea:	4638      	mov	r0, r7
 8002cec:	47c0      	blx	r8
 8002cee:	3001      	adds	r0, #1
 8002cf0:	d0e6      	beq.n	8002cc0 <_printf_common+0xa4>
 8002cf2:	3601      	adds	r6, #1
 8002cf4:	e7d9      	b.n	8002caa <_printf_common+0x8e>
	...

08002cf8 <_printf_i>:
 8002cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	7e0f      	ldrb	r7, [r1, #24]
 8002cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d00:	2f78      	cmp	r7, #120	; 0x78
 8002d02:	4691      	mov	r9, r2
 8002d04:	4680      	mov	r8, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	469a      	mov	sl, r3
 8002d0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d0e:	d807      	bhi.n	8002d20 <_printf_i+0x28>
 8002d10:	2f62      	cmp	r7, #98	; 0x62
 8002d12:	d80a      	bhi.n	8002d2a <_printf_i+0x32>
 8002d14:	2f00      	cmp	r7, #0
 8002d16:	f000 80d8 	beq.w	8002eca <_printf_i+0x1d2>
 8002d1a:	2f58      	cmp	r7, #88	; 0x58
 8002d1c:	f000 80a3 	beq.w	8002e66 <_printf_i+0x16e>
 8002d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d28:	e03a      	b.n	8002da0 <_printf_i+0xa8>
 8002d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d2e:	2b15      	cmp	r3, #21
 8002d30:	d8f6      	bhi.n	8002d20 <_printf_i+0x28>
 8002d32:	a101      	add	r1, pc, #4	; (adr r1, 8002d38 <_printf_i+0x40>)
 8002d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d38:	08002d91 	.word	0x08002d91
 8002d3c:	08002da5 	.word	0x08002da5
 8002d40:	08002d21 	.word	0x08002d21
 8002d44:	08002d21 	.word	0x08002d21
 8002d48:	08002d21 	.word	0x08002d21
 8002d4c:	08002d21 	.word	0x08002d21
 8002d50:	08002da5 	.word	0x08002da5
 8002d54:	08002d21 	.word	0x08002d21
 8002d58:	08002d21 	.word	0x08002d21
 8002d5c:	08002d21 	.word	0x08002d21
 8002d60:	08002d21 	.word	0x08002d21
 8002d64:	08002eb1 	.word	0x08002eb1
 8002d68:	08002dd5 	.word	0x08002dd5
 8002d6c:	08002e93 	.word	0x08002e93
 8002d70:	08002d21 	.word	0x08002d21
 8002d74:	08002d21 	.word	0x08002d21
 8002d78:	08002ed3 	.word	0x08002ed3
 8002d7c:	08002d21 	.word	0x08002d21
 8002d80:	08002dd5 	.word	0x08002dd5
 8002d84:	08002d21 	.word	0x08002d21
 8002d88:	08002d21 	.word	0x08002d21
 8002d8c:	08002e9b 	.word	0x08002e9b
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	1d1a      	adds	r2, r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	602a      	str	r2, [r5, #0]
 8002d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0a3      	b.n	8002eec <_printf_i+0x1f4>
 8002da4:	6820      	ldr	r0, [r4, #0]
 8002da6:	6829      	ldr	r1, [r5, #0]
 8002da8:	0606      	lsls	r6, r0, #24
 8002daa:	f101 0304 	add.w	r3, r1, #4
 8002dae:	d50a      	bpl.n	8002dc6 <_printf_i+0xce>
 8002db0:	680e      	ldr	r6, [r1, #0]
 8002db2:	602b      	str	r3, [r5, #0]
 8002db4:	2e00      	cmp	r6, #0
 8002db6:	da03      	bge.n	8002dc0 <_printf_i+0xc8>
 8002db8:	232d      	movs	r3, #45	; 0x2d
 8002dba:	4276      	negs	r6, r6
 8002dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dc0:	485e      	ldr	r0, [pc, #376]	; (8002f3c <_printf_i+0x244>)
 8002dc2:	230a      	movs	r3, #10
 8002dc4:	e019      	b.n	8002dfa <_printf_i+0x102>
 8002dc6:	680e      	ldr	r6, [r1, #0]
 8002dc8:	602b      	str	r3, [r5, #0]
 8002dca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dce:	bf18      	it	ne
 8002dd0:	b236      	sxthne	r6, r6
 8002dd2:	e7ef      	b.n	8002db4 <_printf_i+0xbc>
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	6820      	ldr	r0, [r4, #0]
 8002dd8:	1d19      	adds	r1, r3, #4
 8002dda:	6029      	str	r1, [r5, #0]
 8002ddc:	0601      	lsls	r1, r0, #24
 8002dde:	d501      	bpl.n	8002de4 <_printf_i+0xec>
 8002de0:	681e      	ldr	r6, [r3, #0]
 8002de2:	e002      	b.n	8002dea <_printf_i+0xf2>
 8002de4:	0646      	lsls	r6, r0, #25
 8002de6:	d5fb      	bpl.n	8002de0 <_printf_i+0xe8>
 8002de8:	881e      	ldrh	r6, [r3, #0]
 8002dea:	4854      	ldr	r0, [pc, #336]	; (8002f3c <_printf_i+0x244>)
 8002dec:	2f6f      	cmp	r7, #111	; 0x6f
 8002dee:	bf0c      	ite	eq
 8002df0:	2308      	moveq	r3, #8
 8002df2:	230a      	movne	r3, #10
 8002df4:	2100      	movs	r1, #0
 8002df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dfa:	6865      	ldr	r5, [r4, #4]
 8002dfc:	60a5      	str	r5, [r4, #8]
 8002dfe:	2d00      	cmp	r5, #0
 8002e00:	bfa2      	ittt	ge
 8002e02:	6821      	ldrge	r1, [r4, #0]
 8002e04:	f021 0104 	bicge.w	r1, r1, #4
 8002e08:	6021      	strge	r1, [r4, #0]
 8002e0a:	b90e      	cbnz	r6, 8002e10 <_printf_i+0x118>
 8002e0c:	2d00      	cmp	r5, #0
 8002e0e:	d04d      	beq.n	8002eac <_printf_i+0x1b4>
 8002e10:	4615      	mov	r5, r2
 8002e12:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e16:	fb03 6711 	mls	r7, r3, r1, r6
 8002e1a:	5dc7      	ldrb	r7, [r0, r7]
 8002e1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e20:	4637      	mov	r7, r6
 8002e22:	42bb      	cmp	r3, r7
 8002e24:	460e      	mov	r6, r1
 8002e26:	d9f4      	bls.n	8002e12 <_printf_i+0x11a>
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d10b      	bne.n	8002e44 <_printf_i+0x14c>
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	07de      	lsls	r6, r3, #31
 8002e30:	d508      	bpl.n	8002e44 <_printf_i+0x14c>
 8002e32:	6923      	ldr	r3, [r4, #16]
 8002e34:	6861      	ldr	r1, [r4, #4]
 8002e36:	4299      	cmp	r1, r3
 8002e38:	bfde      	ittt	le
 8002e3a:	2330      	movle	r3, #48	; 0x30
 8002e3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e44:	1b52      	subs	r2, r2, r5
 8002e46:	6122      	str	r2, [r4, #16]
 8002e48:	f8cd a000 	str.w	sl, [sp]
 8002e4c:	464b      	mov	r3, r9
 8002e4e:	aa03      	add	r2, sp, #12
 8002e50:	4621      	mov	r1, r4
 8002e52:	4640      	mov	r0, r8
 8002e54:	f7ff fee2 	bl	8002c1c <_printf_common>
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d14c      	bne.n	8002ef6 <_printf_i+0x1fe>
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e60:	b004      	add	sp, #16
 8002e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e66:	4835      	ldr	r0, [pc, #212]	; (8002f3c <_printf_i+0x244>)
 8002e68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e6c:	6829      	ldr	r1, [r5, #0]
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e74:	6029      	str	r1, [r5, #0]
 8002e76:	061d      	lsls	r5, r3, #24
 8002e78:	d514      	bpl.n	8002ea4 <_printf_i+0x1ac>
 8002e7a:	07df      	lsls	r7, r3, #31
 8002e7c:	bf44      	itt	mi
 8002e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8002e82:	6023      	strmi	r3, [r4, #0]
 8002e84:	b91e      	cbnz	r6, 8002e8e <_printf_i+0x196>
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	f023 0320 	bic.w	r3, r3, #32
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	2310      	movs	r3, #16
 8002e90:	e7b0      	b.n	8002df4 <_printf_i+0xfc>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	f043 0320 	orr.w	r3, r3, #32
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	2378      	movs	r3, #120	; 0x78
 8002e9c:	4828      	ldr	r0, [pc, #160]	; (8002f40 <_printf_i+0x248>)
 8002e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ea2:	e7e3      	b.n	8002e6c <_printf_i+0x174>
 8002ea4:	0659      	lsls	r1, r3, #25
 8002ea6:	bf48      	it	mi
 8002ea8:	b2b6      	uxthmi	r6, r6
 8002eaa:	e7e6      	b.n	8002e7a <_printf_i+0x182>
 8002eac:	4615      	mov	r5, r2
 8002eae:	e7bb      	b.n	8002e28 <_printf_i+0x130>
 8002eb0:	682b      	ldr	r3, [r5, #0]
 8002eb2:	6826      	ldr	r6, [r4, #0]
 8002eb4:	6961      	ldr	r1, [r4, #20]
 8002eb6:	1d18      	adds	r0, r3, #4
 8002eb8:	6028      	str	r0, [r5, #0]
 8002eba:	0635      	lsls	r5, r6, #24
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	d501      	bpl.n	8002ec4 <_printf_i+0x1cc>
 8002ec0:	6019      	str	r1, [r3, #0]
 8002ec2:	e002      	b.n	8002eca <_printf_i+0x1d2>
 8002ec4:	0670      	lsls	r0, r6, #25
 8002ec6:	d5fb      	bpl.n	8002ec0 <_printf_i+0x1c8>
 8002ec8:	8019      	strh	r1, [r3, #0]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	6123      	str	r3, [r4, #16]
 8002ece:	4615      	mov	r5, r2
 8002ed0:	e7ba      	b.n	8002e48 <_printf_i+0x150>
 8002ed2:	682b      	ldr	r3, [r5, #0]
 8002ed4:	1d1a      	adds	r2, r3, #4
 8002ed6:	602a      	str	r2, [r5, #0]
 8002ed8:	681d      	ldr	r5, [r3, #0]
 8002eda:	6862      	ldr	r2, [r4, #4]
 8002edc:	2100      	movs	r1, #0
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f7fd f94e 	bl	8000180 <memchr>
 8002ee4:	b108      	cbz	r0, 8002eea <_printf_i+0x1f2>
 8002ee6:	1b40      	subs	r0, r0, r5
 8002ee8:	6060      	str	r0, [r4, #4]
 8002eea:	6863      	ldr	r3, [r4, #4]
 8002eec:	6123      	str	r3, [r4, #16]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef4:	e7a8      	b.n	8002e48 <_printf_i+0x150>
 8002ef6:	6923      	ldr	r3, [r4, #16]
 8002ef8:	462a      	mov	r2, r5
 8002efa:	4649      	mov	r1, r9
 8002efc:	4640      	mov	r0, r8
 8002efe:	47d0      	blx	sl
 8002f00:	3001      	adds	r0, #1
 8002f02:	d0ab      	beq.n	8002e5c <_printf_i+0x164>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	079b      	lsls	r3, r3, #30
 8002f08:	d413      	bmi.n	8002f32 <_printf_i+0x23a>
 8002f0a:	68e0      	ldr	r0, [r4, #12]
 8002f0c:	9b03      	ldr	r3, [sp, #12]
 8002f0e:	4298      	cmp	r0, r3
 8002f10:	bfb8      	it	lt
 8002f12:	4618      	movlt	r0, r3
 8002f14:	e7a4      	b.n	8002e60 <_printf_i+0x168>
 8002f16:	2301      	movs	r3, #1
 8002f18:	4632      	mov	r2, r6
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	4640      	mov	r0, r8
 8002f1e:	47d0      	blx	sl
 8002f20:	3001      	adds	r0, #1
 8002f22:	d09b      	beq.n	8002e5c <_printf_i+0x164>
 8002f24:	3501      	adds	r5, #1
 8002f26:	68e3      	ldr	r3, [r4, #12]
 8002f28:	9903      	ldr	r1, [sp, #12]
 8002f2a:	1a5b      	subs	r3, r3, r1
 8002f2c:	42ab      	cmp	r3, r5
 8002f2e:	dcf2      	bgt.n	8002f16 <_printf_i+0x21e>
 8002f30:	e7eb      	b.n	8002f0a <_printf_i+0x212>
 8002f32:	2500      	movs	r5, #0
 8002f34:	f104 0619 	add.w	r6, r4, #25
 8002f38:	e7f5      	b.n	8002f26 <_printf_i+0x22e>
 8002f3a:	bf00      	nop
 8002f3c:	0800369d 	.word	0x0800369d
 8002f40:	080036ae 	.word	0x080036ae

08002f44 <_sbrk_r>:
 8002f44:	b538      	push	{r3, r4, r5, lr}
 8002f46:	4d06      	ldr	r5, [pc, #24]	; (8002f60 <_sbrk_r+0x1c>)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	602b      	str	r3, [r5, #0]
 8002f50:	f7fe f922 	bl	8001198 <_sbrk>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	d102      	bne.n	8002f5e <_sbrk_r+0x1a>
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	b103      	cbz	r3, 8002f5e <_sbrk_r+0x1a>
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	200000dc 	.word	0x200000dc

08002f64 <__sread>:
 8002f64:	b510      	push	{r4, lr}
 8002f66:	460c      	mov	r4, r1
 8002f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f6c:	f000 faac 	bl	80034c8 <_read_r>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	bfab      	itete	ge
 8002f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f76:	89a3      	ldrhlt	r3, [r4, #12]
 8002f78:	181b      	addge	r3, r3, r0
 8002f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f7e:	bfac      	ite	ge
 8002f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f82:	81a3      	strhlt	r3, [r4, #12]
 8002f84:	bd10      	pop	{r4, pc}

08002f86 <__swrite>:
 8002f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f8a:	461f      	mov	r7, r3
 8002f8c:	898b      	ldrh	r3, [r1, #12]
 8002f8e:	05db      	lsls	r3, r3, #23
 8002f90:	4605      	mov	r5, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	4616      	mov	r6, r2
 8002f96:	d505      	bpl.n	8002fa4 <__swrite+0x1e>
 8002f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f000 f9c4 	bl	800332c <_lseek_r>
 8002fa4:	89a3      	ldrh	r3, [r4, #12]
 8002fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	4632      	mov	r2, r6
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fba:	f000 b869 	b.w	8003090 <_write_r>

08002fbe <__sseek>:
 8002fbe:	b510      	push	{r4, lr}
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc6:	f000 f9b1 	bl	800332c <_lseek_r>
 8002fca:	1c43      	adds	r3, r0, #1
 8002fcc:	89a3      	ldrh	r3, [r4, #12]
 8002fce:	bf15      	itete	ne
 8002fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002fda:	81a3      	strheq	r3, [r4, #12]
 8002fdc:	bf18      	it	ne
 8002fde:	81a3      	strhne	r3, [r4, #12]
 8002fe0:	bd10      	pop	{r4, pc}

08002fe2 <__sclose>:
 8002fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe6:	f000 b8d3 	b.w	8003190 <_close_r>
	...

08002fec <__swbuf_r>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	460e      	mov	r6, r1
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	b118      	cbz	r0, 8002ffe <__swbuf_r+0x12>
 8002ff6:	6983      	ldr	r3, [r0, #24]
 8002ff8:	b90b      	cbnz	r3, 8002ffe <__swbuf_r+0x12>
 8002ffa:	f7ff fb83 	bl	8002704 <__sinit>
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <__swbuf_r+0x98>)
 8003000:	429c      	cmp	r4, r3
 8003002:	d12b      	bne.n	800305c <__swbuf_r+0x70>
 8003004:	686c      	ldr	r4, [r5, #4]
 8003006:	69a3      	ldr	r3, [r4, #24]
 8003008:	60a3      	str	r3, [r4, #8]
 800300a:	89a3      	ldrh	r3, [r4, #12]
 800300c:	071a      	lsls	r2, r3, #28
 800300e:	d52f      	bpl.n	8003070 <__swbuf_r+0x84>
 8003010:	6923      	ldr	r3, [r4, #16]
 8003012:	b36b      	cbz	r3, 8003070 <__swbuf_r+0x84>
 8003014:	6923      	ldr	r3, [r4, #16]
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	1ac0      	subs	r0, r0, r3
 800301a:	6963      	ldr	r3, [r4, #20]
 800301c:	b2f6      	uxtb	r6, r6
 800301e:	4283      	cmp	r3, r0
 8003020:	4637      	mov	r7, r6
 8003022:	dc04      	bgt.n	800302e <__swbuf_r+0x42>
 8003024:	4621      	mov	r1, r4
 8003026:	4628      	mov	r0, r5
 8003028:	f000 f944 	bl	80032b4 <_fflush_r>
 800302c:	bb30      	cbnz	r0, 800307c <__swbuf_r+0x90>
 800302e:	68a3      	ldr	r3, [r4, #8]
 8003030:	3b01      	subs	r3, #1
 8003032:	60a3      	str	r3, [r4, #8]
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	6022      	str	r2, [r4, #0]
 800303a:	701e      	strb	r6, [r3, #0]
 800303c:	6963      	ldr	r3, [r4, #20]
 800303e:	3001      	adds	r0, #1
 8003040:	4283      	cmp	r3, r0
 8003042:	d004      	beq.n	800304e <__swbuf_r+0x62>
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	07db      	lsls	r3, r3, #31
 8003048:	d506      	bpl.n	8003058 <__swbuf_r+0x6c>
 800304a:	2e0a      	cmp	r6, #10
 800304c:	d104      	bne.n	8003058 <__swbuf_r+0x6c>
 800304e:	4621      	mov	r1, r4
 8003050:	4628      	mov	r0, r5
 8003052:	f000 f92f 	bl	80032b4 <_fflush_r>
 8003056:	b988      	cbnz	r0, 800307c <__swbuf_r+0x90>
 8003058:	4638      	mov	r0, r7
 800305a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <__swbuf_r+0x9c>)
 800305e:	429c      	cmp	r4, r3
 8003060:	d101      	bne.n	8003066 <__swbuf_r+0x7a>
 8003062:	68ac      	ldr	r4, [r5, #8]
 8003064:	e7cf      	b.n	8003006 <__swbuf_r+0x1a>
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <__swbuf_r+0xa0>)
 8003068:	429c      	cmp	r4, r3
 800306a:	bf08      	it	eq
 800306c:	68ec      	ldreq	r4, [r5, #12]
 800306e:	e7ca      	b.n	8003006 <__swbuf_r+0x1a>
 8003070:	4621      	mov	r1, r4
 8003072:	4628      	mov	r0, r5
 8003074:	f000 f81e 	bl	80030b4 <__swsetup_r>
 8003078:	2800      	cmp	r0, #0
 800307a:	d0cb      	beq.n	8003014 <__swbuf_r+0x28>
 800307c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003080:	e7ea      	b.n	8003058 <__swbuf_r+0x6c>
 8003082:	bf00      	nop
 8003084:	0800364c 	.word	0x0800364c
 8003088:	0800366c 	.word	0x0800366c
 800308c:	0800362c 	.word	0x0800362c

08003090 <_write_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4d07      	ldr	r5, [pc, #28]	; (80030b0 <_write_r+0x20>)
 8003094:	4604      	mov	r4, r0
 8003096:	4608      	mov	r0, r1
 8003098:	4611      	mov	r1, r2
 800309a:	2200      	movs	r2, #0
 800309c:	602a      	str	r2, [r5, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	f7fe f82e 	bl	8001100 <_write>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d102      	bne.n	80030ae <_write_r+0x1e>
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	b103      	cbz	r3, 80030ae <_write_r+0x1e>
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	200000dc 	.word	0x200000dc

080030b4 <__swsetup_r>:
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <__swsetup_r+0xcc>)
 80030b6:	b570      	push	{r4, r5, r6, lr}
 80030b8:	681d      	ldr	r5, [r3, #0]
 80030ba:	4606      	mov	r6, r0
 80030bc:	460c      	mov	r4, r1
 80030be:	b125      	cbz	r5, 80030ca <__swsetup_r+0x16>
 80030c0:	69ab      	ldr	r3, [r5, #24]
 80030c2:	b913      	cbnz	r3, 80030ca <__swsetup_r+0x16>
 80030c4:	4628      	mov	r0, r5
 80030c6:	f7ff fb1d 	bl	8002704 <__sinit>
 80030ca:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <__swsetup_r+0xd0>)
 80030cc:	429c      	cmp	r4, r3
 80030ce:	d10f      	bne.n	80030f0 <__swsetup_r+0x3c>
 80030d0:	686c      	ldr	r4, [r5, #4]
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030d8:	0719      	lsls	r1, r3, #28
 80030da:	d42c      	bmi.n	8003136 <__swsetup_r+0x82>
 80030dc:	06dd      	lsls	r5, r3, #27
 80030de:	d411      	bmi.n	8003104 <__swsetup_r+0x50>
 80030e0:	2309      	movs	r3, #9
 80030e2:	6033      	str	r3, [r6, #0]
 80030e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030e8:	81a3      	strh	r3, [r4, #12]
 80030ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ee:	e03e      	b.n	800316e <__swsetup_r+0xba>
 80030f0:	4b25      	ldr	r3, [pc, #148]	; (8003188 <__swsetup_r+0xd4>)
 80030f2:	429c      	cmp	r4, r3
 80030f4:	d101      	bne.n	80030fa <__swsetup_r+0x46>
 80030f6:	68ac      	ldr	r4, [r5, #8]
 80030f8:	e7eb      	b.n	80030d2 <__swsetup_r+0x1e>
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <__swsetup_r+0xd8>)
 80030fc:	429c      	cmp	r4, r3
 80030fe:	bf08      	it	eq
 8003100:	68ec      	ldreq	r4, [r5, #12]
 8003102:	e7e6      	b.n	80030d2 <__swsetup_r+0x1e>
 8003104:	0758      	lsls	r0, r3, #29
 8003106:	d512      	bpl.n	800312e <__swsetup_r+0x7a>
 8003108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800310a:	b141      	cbz	r1, 800311e <__swsetup_r+0x6a>
 800310c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003110:	4299      	cmp	r1, r3
 8003112:	d002      	beq.n	800311a <__swsetup_r+0x66>
 8003114:	4630      	mov	r0, r6
 8003116:	f000 f98d 	bl	8003434 <_free_r>
 800311a:	2300      	movs	r3, #0
 800311c:	6363      	str	r3, [r4, #52]	; 0x34
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003124:	81a3      	strh	r3, [r4, #12]
 8003126:	2300      	movs	r3, #0
 8003128:	6063      	str	r3, [r4, #4]
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	f043 0308 	orr.w	r3, r3, #8
 8003134:	81a3      	strh	r3, [r4, #12]
 8003136:	6923      	ldr	r3, [r4, #16]
 8003138:	b94b      	cbnz	r3, 800314e <__swsetup_r+0x9a>
 800313a:	89a3      	ldrh	r3, [r4, #12]
 800313c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003144:	d003      	beq.n	800314e <__swsetup_r+0x9a>
 8003146:	4621      	mov	r1, r4
 8003148:	4630      	mov	r0, r6
 800314a:	f000 f927 	bl	800339c <__smakebuf_r>
 800314e:	89a0      	ldrh	r0, [r4, #12]
 8003150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003154:	f010 0301 	ands.w	r3, r0, #1
 8003158:	d00a      	beq.n	8003170 <__swsetup_r+0xbc>
 800315a:	2300      	movs	r3, #0
 800315c:	60a3      	str	r3, [r4, #8]
 800315e:	6963      	ldr	r3, [r4, #20]
 8003160:	425b      	negs	r3, r3
 8003162:	61a3      	str	r3, [r4, #24]
 8003164:	6923      	ldr	r3, [r4, #16]
 8003166:	b943      	cbnz	r3, 800317a <__swsetup_r+0xc6>
 8003168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800316c:	d1ba      	bne.n	80030e4 <__swsetup_r+0x30>
 800316e:	bd70      	pop	{r4, r5, r6, pc}
 8003170:	0781      	lsls	r1, r0, #30
 8003172:	bf58      	it	pl
 8003174:	6963      	ldrpl	r3, [r4, #20]
 8003176:	60a3      	str	r3, [r4, #8]
 8003178:	e7f4      	b.n	8003164 <__swsetup_r+0xb0>
 800317a:	2000      	movs	r0, #0
 800317c:	e7f7      	b.n	800316e <__swsetup_r+0xba>
 800317e:	bf00      	nop
 8003180:	20000008 	.word	0x20000008
 8003184:	0800364c 	.word	0x0800364c
 8003188:	0800366c 	.word	0x0800366c
 800318c:	0800362c 	.word	0x0800362c

08003190 <_close_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	4d06      	ldr	r5, [pc, #24]	; (80031ac <_close_r+0x1c>)
 8003194:	2300      	movs	r3, #0
 8003196:	4604      	mov	r4, r0
 8003198:	4608      	mov	r0, r1
 800319a:	602b      	str	r3, [r5, #0]
 800319c:	f7fd ffcc 	bl	8001138 <_close>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d102      	bne.n	80031aa <_close_r+0x1a>
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	b103      	cbz	r3, 80031aa <_close_r+0x1a>
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
 80031ac:	200000dc 	.word	0x200000dc

080031b0 <__sflush_r>:
 80031b0:	898a      	ldrh	r2, [r1, #12]
 80031b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b4:	4605      	mov	r5, r0
 80031b6:	0710      	lsls	r0, r2, #28
 80031b8:	460c      	mov	r4, r1
 80031ba:	d457      	bmi.n	800326c <__sflush_r+0xbc>
 80031bc:	684b      	ldr	r3, [r1, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	dc04      	bgt.n	80031cc <__sflush_r+0x1c>
 80031c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	dc01      	bgt.n	80031cc <__sflush_r+0x1c>
 80031c8:	2000      	movs	r0, #0
 80031ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031ce:	2e00      	cmp	r6, #0
 80031d0:	d0fa      	beq.n	80031c8 <__sflush_r+0x18>
 80031d2:	2300      	movs	r3, #0
 80031d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031d8:	682f      	ldr	r7, [r5, #0]
 80031da:	602b      	str	r3, [r5, #0]
 80031dc:	d032      	beq.n	8003244 <__sflush_r+0x94>
 80031de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	075a      	lsls	r2, r3, #29
 80031e4:	d505      	bpl.n	80031f2 <__sflush_r+0x42>
 80031e6:	6863      	ldr	r3, [r4, #4]
 80031e8:	1ac0      	subs	r0, r0, r3
 80031ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031ec:	b10b      	cbz	r3, 80031f2 <__sflush_r+0x42>
 80031ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031f0:	1ac0      	subs	r0, r0, r3
 80031f2:	2300      	movs	r3, #0
 80031f4:	4602      	mov	r2, r0
 80031f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031f8:	6a21      	ldr	r1, [r4, #32]
 80031fa:	4628      	mov	r0, r5
 80031fc:	47b0      	blx	r6
 80031fe:	1c43      	adds	r3, r0, #1
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	d106      	bne.n	8003212 <__sflush_r+0x62>
 8003204:	6829      	ldr	r1, [r5, #0]
 8003206:	291d      	cmp	r1, #29
 8003208:	d82c      	bhi.n	8003264 <__sflush_r+0xb4>
 800320a:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <__sflush_r+0x100>)
 800320c:	40ca      	lsrs	r2, r1
 800320e:	07d6      	lsls	r6, r2, #31
 8003210:	d528      	bpl.n	8003264 <__sflush_r+0xb4>
 8003212:	2200      	movs	r2, #0
 8003214:	6062      	str	r2, [r4, #4]
 8003216:	04d9      	lsls	r1, r3, #19
 8003218:	6922      	ldr	r2, [r4, #16]
 800321a:	6022      	str	r2, [r4, #0]
 800321c:	d504      	bpl.n	8003228 <__sflush_r+0x78>
 800321e:	1c42      	adds	r2, r0, #1
 8003220:	d101      	bne.n	8003226 <__sflush_r+0x76>
 8003222:	682b      	ldr	r3, [r5, #0]
 8003224:	b903      	cbnz	r3, 8003228 <__sflush_r+0x78>
 8003226:	6560      	str	r0, [r4, #84]	; 0x54
 8003228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800322a:	602f      	str	r7, [r5, #0]
 800322c:	2900      	cmp	r1, #0
 800322e:	d0cb      	beq.n	80031c8 <__sflush_r+0x18>
 8003230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003234:	4299      	cmp	r1, r3
 8003236:	d002      	beq.n	800323e <__sflush_r+0x8e>
 8003238:	4628      	mov	r0, r5
 800323a:	f000 f8fb 	bl	8003434 <_free_r>
 800323e:	2000      	movs	r0, #0
 8003240:	6360      	str	r0, [r4, #52]	; 0x34
 8003242:	e7c2      	b.n	80031ca <__sflush_r+0x1a>
 8003244:	6a21      	ldr	r1, [r4, #32]
 8003246:	2301      	movs	r3, #1
 8003248:	4628      	mov	r0, r5
 800324a:	47b0      	blx	r6
 800324c:	1c41      	adds	r1, r0, #1
 800324e:	d1c7      	bne.n	80031e0 <__sflush_r+0x30>
 8003250:	682b      	ldr	r3, [r5, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0c4      	beq.n	80031e0 <__sflush_r+0x30>
 8003256:	2b1d      	cmp	r3, #29
 8003258:	d001      	beq.n	800325e <__sflush_r+0xae>
 800325a:	2b16      	cmp	r3, #22
 800325c:	d101      	bne.n	8003262 <__sflush_r+0xb2>
 800325e:	602f      	str	r7, [r5, #0]
 8003260:	e7b2      	b.n	80031c8 <__sflush_r+0x18>
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	e7ae      	b.n	80031ca <__sflush_r+0x1a>
 800326c:	690f      	ldr	r7, [r1, #16]
 800326e:	2f00      	cmp	r7, #0
 8003270:	d0aa      	beq.n	80031c8 <__sflush_r+0x18>
 8003272:	0793      	lsls	r3, r2, #30
 8003274:	680e      	ldr	r6, [r1, #0]
 8003276:	bf08      	it	eq
 8003278:	694b      	ldreq	r3, [r1, #20]
 800327a:	600f      	str	r7, [r1, #0]
 800327c:	bf18      	it	ne
 800327e:	2300      	movne	r3, #0
 8003280:	1bf6      	subs	r6, r6, r7
 8003282:	608b      	str	r3, [r1, #8]
 8003284:	2e00      	cmp	r6, #0
 8003286:	dd9f      	ble.n	80031c8 <__sflush_r+0x18>
 8003288:	6a21      	ldr	r1, [r4, #32]
 800328a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800328e:	4633      	mov	r3, r6
 8003290:	463a      	mov	r2, r7
 8003292:	4628      	mov	r0, r5
 8003294:	47e0      	blx	ip
 8003296:	2800      	cmp	r0, #0
 8003298:	dc06      	bgt.n	80032a8 <__sflush_r+0xf8>
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a0:	81a3      	strh	r3, [r4, #12]
 80032a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032a6:	e790      	b.n	80031ca <__sflush_r+0x1a>
 80032a8:	4407      	add	r7, r0
 80032aa:	1a36      	subs	r6, r6, r0
 80032ac:	e7ea      	b.n	8003284 <__sflush_r+0xd4>
 80032ae:	bf00      	nop
 80032b0:	20400001 	.word	0x20400001

080032b4 <_fflush_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	690b      	ldr	r3, [r1, #16]
 80032b8:	4605      	mov	r5, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	b913      	cbnz	r3, 80032c4 <_fflush_r+0x10>
 80032be:	2500      	movs	r5, #0
 80032c0:	4628      	mov	r0, r5
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	b118      	cbz	r0, 80032ce <_fflush_r+0x1a>
 80032c6:	6983      	ldr	r3, [r0, #24]
 80032c8:	b90b      	cbnz	r3, 80032ce <_fflush_r+0x1a>
 80032ca:	f7ff fa1b 	bl	8002704 <__sinit>
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <_fflush_r+0x6c>)
 80032d0:	429c      	cmp	r4, r3
 80032d2:	d11b      	bne.n	800330c <_fflush_r+0x58>
 80032d4:	686c      	ldr	r4, [r5, #4]
 80032d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0ef      	beq.n	80032be <_fflush_r+0xa>
 80032de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032e0:	07d0      	lsls	r0, r2, #31
 80032e2:	d404      	bmi.n	80032ee <_fflush_r+0x3a>
 80032e4:	0599      	lsls	r1, r3, #22
 80032e6:	d402      	bmi.n	80032ee <_fflush_r+0x3a>
 80032e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ea:	f7ff faa9 	bl	8002840 <__retarget_lock_acquire_recursive>
 80032ee:	4628      	mov	r0, r5
 80032f0:	4621      	mov	r1, r4
 80032f2:	f7ff ff5d 	bl	80031b0 <__sflush_r>
 80032f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032f8:	07da      	lsls	r2, r3, #31
 80032fa:	4605      	mov	r5, r0
 80032fc:	d4e0      	bmi.n	80032c0 <_fflush_r+0xc>
 80032fe:	89a3      	ldrh	r3, [r4, #12]
 8003300:	059b      	lsls	r3, r3, #22
 8003302:	d4dd      	bmi.n	80032c0 <_fflush_r+0xc>
 8003304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003306:	f7ff fa9c 	bl	8002842 <__retarget_lock_release_recursive>
 800330a:	e7d9      	b.n	80032c0 <_fflush_r+0xc>
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <_fflush_r+0x70>)
 800330e:	429c      	cmp	r4, r3
 8003310:	d101      	bne.n	8003316 <_fflush_r+0x62>
 8003312:	68ac      	ldr	r4, [r5, #8]
 8003314:	e7df      	b.n	80032d6 <_fflush_r+0x22>
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <_fflush_r+0x74>)
 8003318:	429c      	cmp	r4, r3
 800331a:	bf08      	it	eq
 800331c:	68ec      	ldreq	r4, [r5, #12]
 800331e:	e7da      	b.n	80032d6 <_fflush_r+0x22>
 8003320:	0800364c 	.word	0x0800364c
 8003324:	0800366c 	.word	0x0800366c
 8003328:	0800362c 	.word	0x0800362c

0800332c <_lseek_r>:
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	4d07      	ldr	r5, [pc, #28]	; (800334c <_lseek_r+0x20>)
 8003330:	4604      	mov	r4, r0
 8003332:	4608      	mov	r0, r1
 8003334:	4611      	mov	r1, r2
 8003336:	2200      	movs	r2, #0
 8003338:	602a      	str	r2, [r5, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	f7fd ff20 	bl	8001180 <_lseek>
 8003340:	1c43      	adds	r3, r0, #1
 8003342:	d102      	bne.n	800334a <_lseek_r+0x1e>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	b103      	cbz	r3, 800334a <_lseek_r+0x1e>
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	200000dc 	.word	0x200000dc

08003350 <__swhatbuf_r>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	460e      	mov	r6, r1
 8003354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003358:	2900      	cmp	r1, #0
 800335a:	b096      	sub	sp, #88	; 0x58
 800335c:	4614      	mov	r4, r2
 800335e:	461d      	mov	r5, r3
 8003360:	da08      	bge.n	8003374 <__swhatbuf_r+0x24>
 8003362:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	602a      	str	r2, [r5, #0]
 800336a:	061a      	lsls	r2, r3, #24
 800336c:	d410      	bmi.n	8003390 <__swhatbuf_r+0x40>
 800336e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003372:	e00e      	b.n	8003392 <__swhatbuf_r+0x42>
 8003374:	466a      	mov	r2, sp
 8003376:	f000 f8b9 	bl	80034ec <_fstat_r>
 800337a:	2800      	cmp	r0, #0
 800337c:	dbf1      	blt.n	8003362 <__swhatbuf_r+0x12>
 800337e:	9a01      	ldr	r2, [sp, #4]
 8003380:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003384:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003388:	425a      	negs	r2, r3
 800338a:	415a      	adcs	r2, r3
 800338c:	602a      	str	r2, [r5, #0]
 800338e:	e7ee      	b.n	800336e <__swhatbuf_r+0x1e>
 8003390:	2340      	movs	r3, #64	; 0x40
 8003392:	2000      	movs	r0, #0
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	b016      	add	sp, #88	; 0x58
 8003398:	bd70      	pop	{r4, r5, r6, pc}
	...

0800339c <__smakebuf_r>:
 800339c:	898b      	ldrh	r3, [r1, #12]
 800339e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033a0:	079d      	lsls	r5, r3, #30
 80033a2:	4606      	mov	r6, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	d507      	bpl.n	80033b8 <__smakebuf_r+0x1c>
 80033a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	6123      	str	r3, [r4, #16]
 80033b0:	2301      	movs	r3, #1
 80033b2:	6163      	str	r3, [r4, #20]
 80033b4:	b002      	add	sp, #8
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	ab01      	add	r3, sp, #4
 80033ba:	466a      	mov	r2, sp
 80033bc:	f7ff ffc8 	bl	8003350 <__swhatbuf_r>
 80033c0:	9900      	ldr	r1, [sp, #0]
 80033c2:	4605      	mov	r5, r0
 80033c4:	4630      	mov	r0, r6
 80033c6:	f7ff fa5d 	bl	8002884 <_malloc_r>
 80033ca:	b948      	cbnz	r0, 80033e0 <__smakebuf_r+0x44>
 80033cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033d0:	059a      	lsls	r2, r3, #22
 80033d2:	d4ef      	bmi.n	80033b4 <__smakebuf_r+0x18>
 80033d4:	f023 0303 	bic.w	r3, r3, #3
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	81a3      	strh	r3, [r4, #12]
 80033de:	e7e3      	b.n	80033a8 <__smakebuf_r+0xc>
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <__smakebuf_r+0x7c>)
 80033e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80033e4:	89a3      	ldrh	r3, [r4, #12]
 80033e6:	6020      	str	r0, [r4, #0]
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	81a3      	strh	r3, [r4, #12]
 80033ee:	9b00      	ldr	r3, [sp, #0]
 80033f0:	6163      	str	r3, [r4, #20]
 80033f2:	9b01      	ldr	r3, [sp, #4]
 80033f4:	6120      	str	r0, [r4, #16]
 80033f6:	b15b      	cbz	r3, 8003410 <__smakebuf_r+0x74>
 80033f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033fc:	4630      	mov	r0, r6
 80033fe:	f000 f887 	bl	8003510 <_isatty_r>
 8003402:	b128      	cbz	r0, 8003410 <__smakebuf_r+0x74>
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	81a3      	strh	r3, [r4, #12]
 8003410:	89a0      	ldrh	r0, [r4, #12]
 8003412:	4305      	orrs	r5, r0
 8003414:	81a5      	strh	r5, [r4, #12]
 8003416:	e7cd      	b.n	80033b4 <__smakebuf_r+0x18>
 8003418:	0800269d 	.word	0x0800269d

0800341c <__malloc_lock>:
 800341c:	4801      	ldr	r0, [pc, #4]	; (8003424 <__malloc_lock+0x8>)
 800341e:	f7ff ba0f 	b.w	8002840 <__retarget_lock_acquire_recursive>
 8003422:	bf00      	nop
 8003424:	200000ce 	.word	0x200000ce

08003428 <__malloc_unlock>:
 8003428:	4801      	ldr	r0, [pc, #4]	; (8003430 <__malloc_unlock+0x8>)
 800342a:	f7ff ba0a 	b.w	8002842 <__retarget_lock_release_recursive>
 800342e:	bf00      	nop
 8003430:	200000ce 	.word	0x200000ce

08003434 <_free_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4605      	mov	r5, r0
 8003438:	2900      	cmp	r1, #0
 800343a:	d041      	beq.n	80034c0 <_free_r+0x8c>
 800343c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003440:	1f0c      	subs	r4, r1, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfb8      	it	lt
 8003446:	18e4      	addlt	r4, r4, r3
 8003448:	f7ff ffe8 	bl	800341c <__malloc_lock>
 800344c:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <_free_r+0x90>)
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	b933      	cbnz	r3, 8003460 <_free_r+0x2c>
 8003452:	6063      	str	r3, [r4, #4]
 8003454:	6014      	str	r4, [r2, #0]
 8003456:	4628      	mov	r0, r5
 8003458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800345c:	f7ff bfe4 	b.w	8003428 <__malloc_unlock>
 8003460:	42a3      	cmp	r3, r4
 8003462:	d908      	bls.n	8003476 <_free_r+0x42>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	1821      	adds	r1, r4, r0
 8003468:	428b      	cmp	r3, r1
 800346a:	bf01      	itttt	eq
 800346c:	6819      	ldreq	r1, [r3, #0]
 800346e:	685b      	ldreq	r3, [r3, #4]
 8003470:	1809      	addeq	r1, r1, r0
 8003472:	6021      	streq	r1, [r4, #0]
 8003474:	e7ed      	b.n	8003452 <_free_r+0x1e>
 8003476:	461a      	mov	r2, r3
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	b10b      	cbz	r3, 8003480 <_free_r+0x4c>
 800347c:	42a3      	cmp	r3, r4
 800347e:	d9fa      	bls.n	8003476 <_free_r+0x42>
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	1850      	adds	r0, r2, r1
 8003484:	42a0      	cmp	r0, r4
 8003486:	d10b      	bne.n	80034a0 <_free_r+0x6c>
 8003488:	6820      	ldr	r0, [r4, #0]
 800348a:	4401      	add	r1, r0
 800348c:	1850      	adds	r0, r2, r1
 800348e:	4283      	cmp	r3, r0
 8003490:	6011      	str	r1, [r2, #0]
 8003492:	d1e0      	bne.n	8003456 <_free_r+0x22>
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	6053      	str	r3, [r2, #4]
 800349a:	4401      	add	r1, r0
 800349c:	6011      	str	r1, [r2, #0]
 800349e:	e7da      	b.n	8003456 <_free_r+0x22>
 80034a0:	d902      	bls.n	80034a8 <_free_r+0x74>
 80034a2:	230c      	movs	r3, #12
 80034a4:	602b      	str	r3, [r5, #0]
 80034a6:	e7d6      	b.n	8003456 <_free_r+0x22>
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	1821      	adds	r1, r4, r0
 80034ac:	428b      	cmp	r3, r1
 80034ae:	bf04      	itt	eq
 80034b0:	6819      	ldreq	r1, [r3, #0]
 80034b2:	685b      	ldreq	r3, [r3, #4]
 80034b4:	6063      	str	r3, [r4, #4]
 80034b6:	bf04      	itt	eq
 80034b8:	1809      	addeq	r1, r1, r0
 80034ba:	6021      	streq	r1, [r4, #0]
 80034bc:	6054      	str	r4, [r2, #4]
 80034be:	e7ca      	b.n	8003456 <_free_r+0x22>
 80034c0:	bd38      	pop	{r3, r4, r5, pc}
 80034c2:	bf00      	nop
 80034c4:	200000d4 	.word	0x200000d4

080034c8 <_read_r>:
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	4d07      	ldr	r5, [pc, #28]	; (80034e8 <_read_r+0x20>)
 80034cc:	4604      	mov	r4, r0
 80034ce:	4608      	mov	r0, r1
 80034d0:	4611      	mov	r1, r2
 80034d2:	2200      	movs	r2, #0
 80034d4:	602a      	str	r2, [r5, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f7fd fdf5 	bl	80010c6 <_read>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_read_r+0x1e>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_read_r+0x1e>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	200000dc 	.word	0x200000dc

080034ec <_fstat_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4d07      	ldr	r5, [pc, #28]	; (800350c <_fstat_r+0x20>)
 80034f0:	2300      	movs	r3, #0
 80034f2:	4604      	mov	r4, r0
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	602b      	str	r3, [r5, #0]
 80034fa:	f7fd fe28 	bl	800114e <_fstat>
 80034fe:	1c43      	adds	r3, r0, #1
 8003500:	d102      	bne.n	8003508 <_fstat_r+0x1c>
 8003502:	682b      	ldr	r3, [r5, #0]
 8003504:	b103      	cbz	r3, 8003508 <_fstat_r+0x1c>
 8003506:	6023      	str	r3, [r4, #0]
 8003508:	bd38      	pop	{r3, r4, r5, pc}
 800350a:	bf00      	nop
 800350c:	200000dc 	.word	0x200000dc

08003510 <_isatty_r>:
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	4d06      	ldr	r5, [pc, #24]	; (800352c <_isatty_r+0x1c>)
 8003514:	2300      	movs	r3, #0
 8003516:	4604      	mov	r4, r0
 8003518:	4608      	mov	r0, r1
 800351a:	602b      	str	r3, [r5, #0]
 800351c:	f7fd fe26 	bl	800116c <_isatty>
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	d102      	bne.n	800352a <_isatty_r+0x1a>
 8003524:	682b      	ldr	r3, [r5, #0]
 8003526:	b103      	cbz	r3, 800352a <_isatty_r+0x1a>
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	bd38      	pop	{r3, r4, r5, pc}
 800352c:	200000dc 	.word	0x200000dc

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
