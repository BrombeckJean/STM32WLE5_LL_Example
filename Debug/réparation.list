
r√©paration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001194  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080012cc  080012cc  000112cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800130c  0800130c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800130c  0800130c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800130c  0800130c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800130c  0800130c  0001130c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001310  08001310  00011310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000008  0800131c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  0800131c  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003dcc  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c61  00000000  00000000  00023dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00024a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  000250b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc19  00000000  00000000  000256a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005bfa  00000000  00000000  000432c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb6f7  00000000  00000000  00048ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001145b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018a0  00000000  00000000  00114604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000008 	.word	0x20000008
 8000154:	00000000 	.word	0x00000000
 8000158:	080012b4 	.word	0x080012b4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000000c 	.word	0x2000000c
 8000174:	080012b4 	.word	0x080012b4

08000178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_IncTick+0x1c>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	461a      	mov	r2, r3
 8000182:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x20>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4413      	add	r3, r2
 8000188:	4a03      	ldr	r2, [pc, #12]	; (8000198 <HAL_IncTick+0x20>)
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	20000000 	.word	0x20000000
 8000198:	20000024 	.word	0x20000024

0800019c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  return uwTick;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <HAL_GetTick+0x10>)
 80001a2:	681b      	ldr	r3, [r3, #0]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000024 	.word	0x20000024

080001b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff0 	bl	800019c <HAL_GetTick>
 80001bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80001c8:	d005      	beq.n	80001d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ca:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <HAL_Delay+0x44>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	461a      	mov	r2, r3
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	4413      	add	r3, r2
 80001d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001d6:	bf00      	nop
 80001d8:	f7ff ffe0 	bl	800019c <HAL_GetTick>
 80001dc:	4602      	mov	r2, r0
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d8f7      	bhi.n	80001d8 <HAL_Delay+0x28>
  {
  }
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	3710      	adds	r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000000 	.word	0x20000000

080001f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b087      	sub	sp, #28
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000206:	e140      	b.n	800048a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	2101      	movs	r1, #1
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	fa01 f303 	lsl.w	r3, r1, r3
 8000214:	4013      	ands	r3, r2
 8000216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	2b00      	cmp	r3, #0
 800021c:	f000 8132 	beq.w	8000484 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	f003 0303 	and.w	r3, r3, #3
 8000228:	2b01      	cmp	r3, #1
 800022a:	d005      	beq.n	8000238 <HAL_GPIO_Init+0x40>
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	f003 0303 	and.w	r3, r3, #3
 8000234:	2b02      	cmp	r3, #2
 8000236:	d130      	bne.n	800029a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	2203      	movs	r2, #3
 8000244:	fa02 f303 	lsl.w	r3, r2, r3
 8000248:	43db      	mvns	r3, r3
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	68da      	ldr	r2, [r3, #12]
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	fa02 f303 	lsl.w	r3, r2, r3
 800025c:	693a      	ldr	r2, [r7, #16]
 800025e:	4313      	orrs	r3, r2
 8000260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	693a      	ldr	r2, [r7, #16]
 8000266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800026e:	2201      	movs	r2, #1
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	fa02 f303 	lsl.w	r3, r2, r3
 8000276:	43db      	mvns	r3, r3
 8000278:	693a      	ldr	r2, [r7, #16]
 800027a:	4013      	ands	r3, r2
 800027c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	091b      	lsrs	r3, r3, #4
 8000284:	f003 0201 	and.w	r2, r3, #1
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa02 f303 	lsl.w	r3, r2, r3
 800028e:	693a      	ldr	r2, [r7, #16]
 8000290:	4313      	orrs	r3, r2
 8000292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	693a      	ldr	r2, [r7, #16]
 8000298:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 0303 	and.w	r3, r3, #3
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d017      	beq.n	80002d6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	2203      	movs	r2, #3
 80002b2:	fa02 f303 	lsl.w	r3, r2, r3
 80002b6:	43db      	mvns	r3, r3
 80002b8:	693a      	ldr	r2, [r7, #16]
 80002ba:	4013      	ands	r3, r2
 80002bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	689a      	ldr	r2, [r3, #8]
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ca:	693a      	ldr	r2, [r7, #16]
 80002cc:	4313      	orrs	r3, r2
 80002ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	693a      	ldr	r2, [r7, #16]
 80002d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f003 0303 	and.w	r3, r3, #3
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d123      	bne.n	800032a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	08da      	lsrs	r2, r3, #3
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3208      	adds	r2, #8
 80002ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	220f      	movs	r2, #15
 80002fa:	fa02 f303 	lsl.w	r3, r2, r3
 80002fe:	43db      	mvns	r3, r3
 8000300:	693a      	ldr	r2, [r7, #16]
 8000302:	4013      	ands	r3, r2
 8000304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	691a      	ldr	r2, [r3, #16]
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	f003 0307 	and.w	r3, r3, #7
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	fa02 f303 	lsl.w	r3, r2, r3
 8000316:	693a      	ldr	r2, [r7, #16]
 8000318:	4313      	orrs	r3, r2
 800031a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	08da      	lsrs	r2, r3, #3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3208      	adds	r2, #8
 8000324:	6939      	ldr	r1, [r7, #16]
 8000326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	2203      	movs	r2, #3
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	43db      	mvns	r3, r3
 800033c:	693a      	ldr	r2, [r7, #16]
 800033e:	4013      	ands	r3, r2
 8000340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	f003 0203 	and.w	r2, r3, #3
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	fa02 f303 	lsl.w	r3, r2, r3
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	4313      	orrs	r3, r2
 8000356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	693a      	ldr	r2, [r7, #16]
 800035c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000366:	2b00      	cmp	r3, #0
 8000368:	f000 808c 	beq.w	8000484 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800036c:	4a4e      	ldr	r2, [pc, #312]	; (80004a8 <HAL_GPIO_Init+0x2b0>)
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	089b      	lsrs	r3, r3, #2
 8000372:	3302      	adds	r3, #2
 8000374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	f003 0303 	and.w	r3, r3, #3
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	2207      	movs	r2, #7
 8000384:	fa02 f303 	lsl.w	r3, r2, r3
 8000388:	43db      	mvns	r3, r3
 800038a:	693a      	ldr	r2, [r7, #16]
 800038c:	4013      	ands	r3, r2
 800038e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000396:	d00d      	beq.n	80003b4 <HAL_GPIO_Init+0x1bc>
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a44      	ldr	r2, [pc, #272]	; (80004ac <HAL_GPIO_Init+0x2b4>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d007      	beq.n	80003b0 <HAL_GPIO_Init+0x1b8>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a43      	ldr	r2, [pc, #268]	; (80004b0 <HAL_GPIO_Init+0x2b8>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d101      	bne.n	80003ac <HAL_GPIO_Init+0x1b4>
 80003a8:	2302      	movs	r3, #2
 80003aa:	e004      	b.n	80003b6 <HAL_GPIO_Init+0x1be>
 80003ac:	2307      	movs	r3, #7
 80003ae:	e002      	b.n	80003b6 <HAL_GPIO_Init+0x1be>
 80003b0:	2301      	movs	r3, #1
 80003b2:	e000      	b.n	80003b6 <HAL_GPIO_Init+0x1be>
 80003b4:	2300      	movs	r3, #0
 80003b6:	697a      	ldr	r2, [r7, #20]
 80003b8:	f002 0203 	and.w	r2, r2, #3
 80003bc:	0092      	lsls	r2, r2, #2
 80003be:	4093      	lsls	r3, r2
 80003c0:	693a      	ldr	r2, [r7, #16]
 80003c2:	4313      	orrs	r3, r2
 80003c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80003c6:	4938      	ldr	r1, [pc, #224]	; (80004a8 <HAL_GPIO_Init+0x2b0>)
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	089b      	lsrs	r3, r3, #2
 80003cc:	3302      	adds	r3, #2
 80003ce:	693a      	ldr	r2, [r7, #16]
 80003d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80003d4:	4b37      	ldr	r3, [pc, #220]	; (80004b4 <HAL_GPIO_Init+0x2bc>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	43db      	mvns	r3, r3
 80003de:	693a      	ldr	r2, [r7, #16]
 80003e0:	4013      	ands	r3, r2
 80003e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d003      	beq.n	80003f8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80003f0:	693a      	ldr	r2, [r7, #16]
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80003f8:	4a2e      	ldr	r2, [pc, #184]	; (80004b4 <HAL_GPIO_Init+0x2bc>)
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80003fe:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <HAL_GPIO_Init+0x2bc>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	43db      	mvns	r3, r3
 8000408:	693a      	ldr	r2, [r7, #16]
 800040a:	4013      	ands	r3, r2
 800040c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000416:	2b00      	cmp	r3, #0
 8000418:	d003      	beq.n	8000422 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800041a:	693a      	ldr	r2, [r7, #16]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4313      	orrs	r3, r2
 8000420:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000422:	4a24      	ldr	r2, [pc, #144]	; (80004b4 <HAL_GPIO_Init+0x2bc>)
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <HAL_GPIO_Init+0x2bc>)
 800042a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800042e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	43db      	mvns	r3, r3
 8000434:	693a      	ldr	r2, [r7, #16]
 8000436:	4013      	ands	r3, r2
 8000438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000442:	2b00      	cmp	r3, #0
 8000444:	d003      	beq.n	800044e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000446:	693a      	ldr	r2, [r7, #16]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	4313      	orrs	r3, r2
 800044c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800044e:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <HAL_GPIO_Init+0x2bc>)
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000456:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <HAL_GPIO_Init+0x2bc>)
 8000458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800045c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	43db      	mvns	r3, r3
 8000462:	693a      	ldr	r2, [r7, #16]
 8000464:	4013      	ands	r3, r2
 8000466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000470:	2b00      	cmp	r3, #0
 8000472:	d003      	beq.n	800047c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000474:	693a      	ldr	r2, [r7, #16]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	4313      	orrs	r3, r2
 800047a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800047c:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <HAL_GPIO_Init+0x2bc>)
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	3301      	adds	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa22 f303 	lsr.w	r3, r2, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	f47f aeb7 	bne.w	8000208 <HAL_GPIO_Init+0x10>
  }
}
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	371c      	adds	r7, #28
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40010000 	.word	0x40010000
 80004ac:	48000400 	.word	0x48000400
 80004b0:	48000800 	.word	0x48000800
 80004b4:	58000800 	.word	0x58000800

080004b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	807b      	strh	r3, [r7, #2]
 80004c4:	4613      	mov	r3, r2
 80004c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004c8:	787b      	ldrb	r3, [r7, #1]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ce:	887a      	ldrh	r2, [r7, #2]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004d4:	e002      	b.n	80004dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004d6:	887a      	ldrh	r2, [r7, #2]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
	...

080004e8 <LL_InitTick>:
  * @param  Ticks Number of ticks
  * @retval None
  */
#endif /* CORE_CM0PLUS */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  if (Ticks > 0U)
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00c      	beq.n	8000512 <LL_InitTick+0x2a>
  {
    /* Configure the SysTick to have interrupt in 1ms time base */
    SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000500:	4a06      	ldr	r2, [pc, #24]	; (800051c <LL_InitTick+0x34>)
 8000502:	3b01      	subs	r3, #1
 8000504:	6053      	str	r3, [r2, #4]
    SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <LL_InitTick+0x34>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <LL_InitTick+0x34>)
 800050e:	2205      	movs	r2, #5
 8000510:	601a      	str	r2, [r3, #0]
                     SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
  }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	e000e010 	.word	0xe000e010

08000520 <LL_Init1msTick>:
    *         (HCLK1_Frequency field)
    * @retval None
    */
#endif /* CORE_CM0PLUS */
  void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000);
 8000528:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ffdb 	bl	80004e8 <LL_InitTick>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <LL_SetSystemCoreClock>:
            @ref LL_RCC_GetSystemClocksFreq (HCLK1_Frequency field))
  * @retval None
  */
#endif /* CORE_CM0PLUS */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <LL_SetSystemCoreClock+0x18>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	20000004 	.word	0x20000004

08000558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800055c:	f000 fe7f 	bl	800125e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000586:	f000 fe71 	bl	800126c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f000 fbc9 	bl	8000d20 <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   r0, =_estack
 8000590:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800059c:	08001314 	.word	0x08001314
  ldr r2, =_sbss
 80005a0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80005a4:	2000003c 	.word	0x2000003c

080005a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC_IRQHandler>
	...

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	600b      	str	r3, [r1, #0]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	58000400 	.word	0x58000400

08000628 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <LL_PWR_EnableBkUpAccess+0x18>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <LL_PWR_EnableBkUpAccess+0x18>)
 8000632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	58000400 	.word	0x58000400

08000644 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000654:	d101      	bne.n	800065a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	58000400 	.word	0x58000400

08000668 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <LL_RCC_HSE_EnableDiv2>:
  * @brief  Enable HSE sysclk and pll prescaler division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_EnableDiv2
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableDiv2(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 8000688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <LL_RCC_HSE_DisableDiv2>:
  * @brief  Disable HSE sysclk and pll prescaler division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_DisableDiv2
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableDiv2(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEPRE);
 80006a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80006c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006ce:	d101      	bne.n	80006d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e000      	b.n	80006d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006f0:	6013      	str	r3, [r2, #0]
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80006fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800070c:	6013      	str	r3, [r2, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800071a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000728:	d101      	bne.n	800072e <LL_RCC_HSE_IsReady+0x18>
 800072a:	2301      	movs	r3, #1
 800072c:	e000      	b.n	8000730 <LL_RCC_HSE_IsReady+0x1a>
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800073c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800077e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000782:	d101      	bne.n	8000788 <LL_RCC_HSI_IsReady+0x18>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <LL_RCC_HSI_IsReady+0x1a>
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800079a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	061b      	lsls	r3, r3, #24
 80007a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ac:	4313      	orrs	r3, r2
 80007ae:	604b      	str	r3, [r1, #4]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80007de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007ea:	f023 0301 	bic.w	r3, r3, #1
 80007ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800080a:	f023 0218 	bic.w	r2, r3, #24
 800080e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <LL_RCC_LSE_EnablePropagation>:
  * @brief  Enable LSE oscillator propagation for system clock
  * @rmtoll BDCR         LSESYSEN      LL_RCC_LSE_EnablePropagation
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnablePropagation(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	2b02      	cmp	r3, #2
 8000856:	d101      	bne.n	800085c <LL_RCC_LSE_IsReady+0x18>
 8000858:	2301      	movs	r3, #1
 800085a:	e000      	b.n	800085e <LL_RCC_LSE_IsReady+0x1a>
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800086a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000896:	f023 0301 	bic.w	r3, r3, #1
 800089a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80008aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d101      	bne.n	80008be <LL_RCC_LSI_IsReady+0x18>
 80008ba:	2301      	movs	r3, #1
 80008bc:	e000      	b.n	80008c0 <LL_RCC_LSI_IsReady+0x1a>
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80008e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008f2:	f023 0301 	bic.w	r3, r3, #1
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	2b02      	cmp	r3, #2
 8000910:	d101      	bne.n	8000916 <LL_RCC_MSI_IsReady+0x16>
 8000912:	2301      	movs	r3, #1
 8000914:	e000      	b.n	8000918 <LL_RCC_MSI_IsReady+0x18>
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	2b08      	cmp	r3, #8
 8000930:	d101      	bne.n	8000936 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000932:	2301      	movs	r3, #1
 8000934:	e000      	b.n	8000938 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800095a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000962:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f023 0203 	bic.w	r2, r3, #3
 8000980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4313      	orrs	r3, r2
 8000988:	608b      	str	r3, [r1, #8]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f003 030c 	and.w	r3, r3, #12
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80009b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	608b      	str	r3, [r1, #8]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80009d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009e0:	f023 020f 	bic.w	r2, r3, #15
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	091b      	lsrs	r3, r3, #4
 80009e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ec:	4313      	orrs	r3, r2
 80009ee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	608b      	str	r3, [r1, #8]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000a34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	608b      	str	r3, [r1, #8]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	608b      	str	r3, [r1, #8]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8000a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	0c1b      	lsrs	r3, r3, #16
 8000a82:	43db      	mvns	r3, r3
 8000a84:	401a      	ands	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM3_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8000aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	0c1b      	lsrs	r3, r3, #16
 8000ab2:	041b      	lsls	r3, r3, #16
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	041b      	lsls	r3, r3, #16
 8000abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <LL_RCC_SetRNGClockSource>:
  *         @arg @ref LL_RCC_RNG_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RNG_CLKSOURCE_MSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRNGClockSource(uint32_t RNGxSource)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8000ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8000ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b92:	d101      	bne.n	8000b98 <LL_RCC_PLL_IsReady+0x18>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <LL_RCC_PLL_IsReady+0x1a>
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	68f9      	ldr	r1, [r7, #12]
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	4311      	orrs	r1, r2
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	0212      	lsls	r2, r2, #8
 8000bc6:	4311      	orrs	r1, r2
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	1fff808c 	.word	0x1fff808c

08000be4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <LL_FLASH_SetLatency+0x24>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f023 0207 	bic.w	r2, r3, #7
 8000c9c:	4904      	ldr	r1, [pc, #16]	; (8000cb0 <LL_FLASH_SetLatency+0x24>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	600b      	str	r3, [r1, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	58004000 	.word	0x58004000

08000cb4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <LL_FLASH_GetLatency+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	58004000 	.word	0x58004000

08000ccc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d106      	bne.n	8000ce8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <LL_SYSTICK_SetClkSource+0x34>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <LL_SYSTICK_SetClkSource+0x34>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000ce6:	e005      	b.n	8000cf4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_SYSTICK_SetClkSource+0x34>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <LL_SYSTICK_SetClkSource+0x34>)
 8000cee:	f023 0304 	bic.w	r3, r3, #4
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <LL_SYSTICK_EnableIT+0x18>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <LL_SYSTICK_EnableIT+0x18>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <main>:
//------------------ GLOBAL STATEMENT -------------------------------------------------------------------------------- GLOBLAL STATEMENT --------------------------------------------------------*/
	static GPIO_InitTypeDef  GPIO_InitStruct;

//------------------ MAIN FUNCTION -------------------------------------------------------------------------------- MAIN FUNCTION --------------------------------------------------------*/
	int main(void)
	{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
		system_clock_config();
 8000d24:	f000 f830 	bl	8000d88 <system_clock_config>
		Systick_conf();
 8000d28:	f000 f909 	bl	8000f3e <Systick_conf>

		// GPIO initialisation
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff ff94 	bl	8000c5a <LL_AHB2_GRP1_EnableClock>
		GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <main+0x60>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <main+0x60>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	609a      	str	r2, [r3, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <main+0x60>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	60da      	str	r2, [r3, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <main+0x60>)
 8000d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <main+0x60>)
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <main+0x64>)
 8000d50:	f7ff fa52 	bl	80001f8 <HAL_GPIO_Init>

		while (1)
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <main+0x64>)
 8000d5c:	f7ff fbac 	bl	80004b8 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d64:	f7ff fa24 	bl	80001b0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <main+0x64>)
 8000d70:	f7ff fba2 	bl	80004b8 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d78:	f7ff fa1a 	bl	80001b0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000d7c:	e7ea      	b.n	8000d54 <main+0x34>
 8000d7e:	bf00      	nop
 8000d80:	20000028 	.word	0x20000028
 8000d84:	48000400 	.word	0x48000400

08000d88 <system_clock_config>:
		}
	}

//------------------ SYSTEM CLOCK CONFIG -------------------------------------------------------------------------------- SYSTEM CLOCK CONFIG --------------------------------------------------------*/
	static void system_clock_config( void )
	{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
		/* declaration */
		//Clock USE
		uint8_t MSI = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
		uint8_t HSI = 1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	71bb      	strb	r3, [r7, #6]
		uint8_t LSI = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	717b      	strb	r3, [r7, #5]
		uint8_t HSE = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	713b      	strb	r3, [r7, #4]
		uint8_t LSE = 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	70fb      	strb	r3, [r7, #3]
		uint8_t PLL = 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	70bb      	strb	r3, [r7, #2]
		const bool useRegulatorVoltage2 = true;
 8000da6:	2301      	movs	r3, #1
 8000da8:	707b      	strb	r3, [r7, #1]
		#define Clock_Src  LL_RCC_SYS_CLKSOURCE_PLL


		//flash latency configuration
	    LL_FLASH_SetLatency( LL_FLASH_LATENCY_2 );
 8000daa:	2002      	movs	r0, #2
 8000dac:	f7ff ff6e 	bl	8000c8c <LL_FLASH_SetLatency>
	    while( LL_FLASH_GetLatency( ) != LL_FLASH_LATENCY_2 ){};
 8000db0:	bf00      	nop
 8000db2:	f7ff ff7f 	bl	8000cb4 <LL_FLASH_GetLatency>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d1fa      	bne.n	8000db2 <system_clock_config+0x2a>

	    //regulator voltage configuration
		LL_PWR_SetRegulVoltageScaling(useRegulatorVoltage2 ? LL_PWR_REGU_VOLTAGE_SCALE2 : LL_PWR_REGU_VOLTAGE_SCALE1); // latency 1 (1.2V) more MCU FREQ -> more CONSO or 2 (1.0V) less MCU FREQ -> less CONSO .
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <system_clock_config+0x40>
 8000dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc6:	e001      	b.n	8000dcc <system_clock_config+0x44>
 8000dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc17 	bl	8000600 <LL_PWR_SetRegulVoltageScaling>

		//HSE clock configuration and starting
		if (HSE==1)
 8000dd2:	793b      	ldrb	r3, [r7, #4]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d111      	bne.n	8000dfc <system_clock_config+0x74>
		{
			if(useRegulatorVoltage2)
 8000dd8:	787b      	ldrb	r3, [r7, #1]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <system_clock_config+0x5c>
			{
				LL_RCC_HSE_EnableDiv2();
 8000dde:	f7ff fc51 	bl	8000684 <LL_RCC_HSE_EnableDiv2>
 8000de2:	e001      	b.n	8000de8 <system_clock_config+0x60>
			}
			else
			{
				LL_RCC_HSE_DisableDiv2();
 8000de4:	f7ff fc5c 	bl	80006a0 <LL_RCC_HSE_DisableDiv2>
			}
			LL_RCC_HSE_EnableTcxo(); // external Quartz TCXO specificity.
 8000de8:	f7ff fc3e 	bl	8000668 <LL_RCC_HSE_EnableTcxo>
			LL_RCC_HSE_Enable();
 8000dec:	f7ff fc77 	bl	80006de <LL_RCC_HSE_Enable>
			while(LL_RCC_HSE_IsReady() == 0);
 8000df0:	bf00      	nop
 8000df2:	f7ff fc90 	bl	8000716 <LL_RCC_HSE_IsReady>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0fa      	beq.n	8000df2 <system_clock_config+0x6a>
		}

		//HSI clock configuration and starting
		if (HSI==1)
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d10a      	bne.n	8000e18 <system_clock_config+0x90>
		{
			LL_RCC_HSI_SetCalibTrimming(64);
 8000e02:	2040      	movs	r0, #64	; 0x40
 8000e04:	f7ff fcc5 	bl	8000792 <LL_RCC_HSI_SetCalibTrimming>
			LL_RCC_HSI_Enable();
 8000e08:	f7ff fc96 	bl	8000738 <LL_RCC_HSI_Enable>
			while(LL_RCC_HSI_IsReady() == 0);
 8000e0c:	bf00      	nop
 8000e0e:	f7ff fcaf 	bl	8000770 <LL_RCC_HSI_IsReady>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0fa      	beq.n	8000e0e <system_clock_config+0x86>
		}

		//MSI clock configuration and starting
		if (MSI==1)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <system_clock_config+0xa6>
		{
			LL_RCC_MSI_Enable();
 8000e1e:	f7ff fd53 	bl	80008c8 <LL_RCC_MSI_Enable>
			while(LL_RCC_MSI_IsReady() == 0);
 8000e22:	bf00      	nop
 8000e24:	f7ff fd6c 	bl	8000900 <LL_RCC_MSI_IsReady>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0fa      	beq.n	8000e24 <system_clock_config+0x9c>
		}

		//LSI clock configuration and starting
		if (LSI==1)
 8000e2e:	797b      	ldrb	r3, [r7, #5]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d107      	bne.n	8000e44 <system_clock_config+0xbc>
		{
			LL_RCC_LSI_Enable( );
 8000e34:	f7ff fd17 	bl	8000866 <LL_RCC_LSI_Enable>
			while( LL_RCC_LSI_IsReady( ) == 0 );
 8000e38:	bf00      	nop
 8000e3a:	f7ff fd34 	bl	80008a6 <LL_RCC_LSI_IsReady>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0fa      	beq.n	8000e3a <system_clock_config+0xb2>
		}

	    //PLL clock configuration and starting
		if (PLL==1)
 8000e44:	78bb      	ldrb	r3, [r7, #2]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d110      	bne.n	8000e6c <system_clock_config+0xe4>
		{
			LL_RCC_PLL_ConfigDomain_SYS( LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 6, LL_RCC_PLLR_DIV_6);
 8000e4a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000e4e:	2206      	movs	r2, #6
 8000e50:	2100      	movs	r1, #0
 8000e52:	2003      	movs	r0, #3
 8000e54:	f7ff fea6 	bl	8000ba4 <LL_RCC_PLL_ConfigDomain_SYS>
			LL_RCC_PLL_Enable( );
 8000e58:	f7ff fe84 	bl	8000b64 <LL_RCC_PLL_Enable>
			LL_RCC_PLL_EnableDomain_SYS();
 8000e5c:	f7ff fee4 	bl	8000c28 <LL_RCC_PLL_EnableDomain_SYS>
			while( LL_RCC_PLL_IsReady( ) == 0 );
 8000e60:	bf00      	nop
 8000e62:	f7ff fe8d 	bl	8000b80 <LL_RCC_PLL_IsReady>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0fa      	beq.n	8000e62 <system_clock_config+0xda>
		}

		//Prescalers configuration
		LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fd9c 	bl	80009aa <LL_RCC_SetAHBPrescaler>
		LL_RCC_SetAHB3Prescaler(LL_RCC_SYSCLK_DIV_1);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff fdac 	bl	80009d0 <LL_RCC_SetAHB3Prescaler>
		LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff fdbf 	bl	80009fc <LL_RCC_SetAPB1Prescaler>
		LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff fdcf 	bl	8000a22 <LL_RCC_SetAPB2Prescaler>

	    //set system clock
	    LL_RCC_SetSysClkSource( Clock_Src );
 8000e84:	2003      	movs	r0, #3
 8000e86:	f7ff fd72 	bl	800096e <LL_RCC_SetSysClkSource>
	    if((LL_RCC_GetSysClkSource() >> RCC_CFGR_SWS_Pos) == LL_RCC_SYS_CLKSOURCE_MSI)
 8000e8a:	f7ff fd83 	bl	8000994 <LL_RCC_GetSysClkSource>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d100      	bne.n	8000e98 <system_clock_config+0x110>
	    {
	    	while(1);
 8000e96:	e7fe      	b.n	8000e96 <system_clock_config+0x10e>
	    }
		while((LL_RCC_GetSysClkSource() >> RCC_CFGR_SWS_Pos) != Clock_Src);
 8000e98:	bf00      	nop
 8000e9a:	f7ff fd7b 	bl	8000994 <LL_RCC_GetSysClkSource>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d1f9      	bne.n	8000e9a <system_clock_config+0x112>

	    //set HSI as clock source for wake-up from Stop mode
	    LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000ea6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000eaa:	f7ff fdcd 	bl	8000a48 <LL_RCC_SetClkAfterWakeFromStop>

	    //enable Backup Domain
	    LL_PWR_EnableBkUpAccess( );
 8000eae:	f7ff fbbb 	bl	8000628 <LL_PWR_EnableBkUpAccess>
	    while(LL_PWR_IsEnabledBkUpAccess() == 0);
 8000eb2:	bf00      	nop
 8000eb4:	f7ff fbc6 	bl	8000644 <LL_PWR_IsEnabledBkUpAccess>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0fa      	beq.n	8000eb4 <system_clock_config+0x12c>

	    // reset of Backup Domain
	    LL_RCC_ForceBackupDomainReset();
 8000ebe:	f7ff fe31 	bl	8000b24 <LL_RCC_ForceBackupDomainReset>
	    LL_RCC_ReleaseBackupDomainReset();
 8000ec2:	f7ff fe3f 	bl	8000b44 <LL_RCC_ReleaseBackupDomainReset>


	    //enable LSE
		if (LSE==1)
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d10c      	bne.n	8000ee6 <system_clock_config+0x15e>
		{
			LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fc94 	bl	80007fa <LL_RCC_LSE_SetDriveCapability>
			LL_RCC_LSE_EnablePropagation();
 8000ed2:	f7ff fca7 	bl	8000824 <LL_RCC_LSE_EnablePropagation>
			LL_RCC_LSE_Enable();
 8000ed6:	f7ff fc70 	bl	80007ba <LL_RCC_LSE_Enable>
			while(LL_RCC_LSE_IsReady() == 0);
 8000eda:	bf00      	nop
 8000edc:	f7ff fcb2 	bl	8000844 <LL_RCC_LSE_IsReady>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0fa      	beq.n	8000edc <system_clock_config+0x154>
		}

	    LL_RCC_SetRTCClockSource( LL_RCC_RTC_CLKSOURCE_LSE );
 8000ee6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000eea:	f7ff fe06 	bl	8000afa <LL_RCC_SetRTCClockSource>
	    //LL_RCC_EnableRTC( );

	    LL_RCC_SetUSARTClockSource( LL_RCC_USART2_CLKSOURCE_PCLK1 );
 8000eee:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8000ef2:	f7ff fdbc 	bl	8000a6e <LL_RCC_SetUSARTClockSource>
	    LL_RCC_SetLPTIMClockSource( LL_RCC_LPTIM1_CLKSOURCE_LSE );
 8000ef6:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 8000efa:	f7ff fdd0 	bl	8000a9e <LL_RCC_SetLPTIMClockSource>
	    LL_RCC_SetRNGClockSource( LL_RCC_RNG_CLKSOURCE_PLL );
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fde6 	bl	8000ad0 <LL_RCC_SetRNGClockSource>

	    //disable unused clocks
	    if (MSI==1)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d101      	bne.n	8000f0e <system_clock_config+0x186>
	    {
	    	LL_RCC_MSI_Disable();
 8000f0a:	f7ff fceb 	bl	80008e4 <LL_RCC_MSI_Disable>
		}
	    if (HSI==1)
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <system_clock_config+0x190>
	    {
	    	LL_RCC_HSI_Disable();
 8000f14:	f7ff fc1e 	bl	8000754 <LL_RCC_HSI_Disable>
		}
	    if (LSI==1)
 8000f18:	797b      	ldrb	r3, [r7, #5]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <system_clock_config+0x19a>
	    {
			LL_RCC_LSI_Disable();
 8000f1e:	f7ff fcb2 	bl	8000886 <LL_RCC_LSI_Disable>
		}
	    if (HSE==1)
 8000f22:	793b      	ldrb	r3, [r7, #4]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <system_clock_config+0x1a4>
	    {
	    	LL_RCC_HSE_Disable();
 8000f28:	f7ff fbe7 	bl	80006fa <LL_RCC_HSE_Disable>
		}
	    if (LSE==1)
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d101      	bne.n	8000f36 <system_clock_config+0x1ae>
	    {
	    	LL_RCC_LSE_Disable();
 8000f32:	f7ff fc52 	bl	80007da <LL_RCC_LSE_Disable>
		}
	}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <Systick_conf>:

//------------------ SYSTICK CONF -------------------------------------------------------------------------------- SYSTICK CONF --------------------------------------------------------*/
	void Systick_conf (void)
	{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
		LL_Init1msTick(GetSystemClockFreq());
 8000f42:	f000 f8bb 	bl	80010bc <GetSystemClockFreq>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fae9 	bl	8000520 <LL_Init1msTick>
		LL_SetSystemCoreClock(GetSystemClockFreq());
 8000f4e:	f000 f8b5 	bl	80010bc <GetSystemClockFreq>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff faf1 	bl	800053c <LL_SetSystemCoreClock>
		LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000f5a:	2004      	movs	r0, #4
 8000f5c:	f7ff feb6 	bl	8000ccc <LL_SYSTICK_SetClkSource>
		NVIC_SetPriority(SysTick_IRQn, TICK_INT_PRIORITY);
 8000f60:	210f      	movs	r1, #15
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f66:	f7ff fb21 	bl	80005ac <__NVIC_SetPriority>
		LL_SYSTICK_EnableIT();
 8000f6a:	f7ff fecb 	bl	8000d04 <LL_SYSTICK_EnableIT>
	}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <PLL_GetFreqDomain_SYS>:

//------------------ PLL GETFREQDOMAIM SYS -------------------------------------------------------------------------------- PLL GETFREQDOMAIM SYS --------------------------------------------------------*/
	uint32_t PLL_GetFreqDomain_SYS(void)
	{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
	  uint32_t pllsource;

	  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
	     SYSCLK = PLL_VCO / PLLR
	  */
	  pllsource = LL_RCC_PLL_GetMainSource();
 8000f7a:	f7ff fe63 	bl	8000c44 <LL_RCC_PLL_GetMainSource>
 8000f7e:	6038      	str	r0, [r7, #0]

	  switch (pllsource)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d03e      	beq.n	8001004 <PLL_GetFreqDomain_SYS+0x90>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d846      	bhi.n	800101a <PLL_GetFreqDomain_SYS+0xa6>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d003      	beq.n	8000f9a <PLL_GetFreqDomain_SYS+0x26>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d032      	beq.n	8000ffe <PLL_GetFreqDomain_SYS+0x8a>
 8000f98:	e03f      	b.n	800101a <PLL_GetFreqDomain_SYS+0xa6>
	  {
	    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
	      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(), ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ? LL_RCC_MSI_GetRange() : LL_RCC_MSI_GetRangeAfterStandby()));
 8000f9a:	f7ff fcc1 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d115      	bne.n	8000fd0 <PLL_GetFreqDomain_SYS+0x5c>
 8000fa4:	f7ff fcbc 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d106      	bne.n	8000fbc <PLL_GetFreqDomain_SYS+0x48>
 8000fae:	f7ff fcc7 	bl	8000940 <LL_RCC_MSI_GetRange>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	e005      	b.n	8000fc8 <PLL_GetFreqDomain_SYS+0x54>
 8000fbc:	f7ff fccb 	bl	8000956 <LL_RCC_MSI_GetRangeAfterStandby>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	0a1b      	lsrs	r3, r3, #8
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	4a39      	ldr	r2, [pc, #228]	; (80010b0 <PLL_GetFreqDomain_SYS+0x13c>)
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	e014      	b.n	8000ffa <PLL_GetFreqDomain_SYS+0x86>
 8000fd0:	f7ff fca6 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d106      	bne.n	8000fe8 <PLL_GetFreqDomain_SYS+0x74>
 8000fda:	f7ff fcb1 	bl	8000940 <LL_RCC_MSI_GetRange>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	e005      	b.n	8000ff4 <PLL_GetFreqDomain_SYS+0x80>
 8000fe8:	f7ff fcb5 	bl	8000956 <LL_RCC_MSI_GetRangeAfterStandby>
 8000fec:	4603      	mov	r3, r0
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	4a2e      	ldr	r2, [pc, #184]	; (80010b0 <PLL_GetFreqDomain_SYS+0x13c>)
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	607b      	str	r3, [r7, #4]
	      break;
 8000ffc:	e03f      	b.n	800107e <PLL_GetFreqDomain_SYS+0x10a>

	    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
	      pllinputfreq = HSI_VALUE;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <PLL_GetFreqDomain_SYS+0x140>)
 8001000:	607b      	str	r3, [r7, #4]
	      break;
 8001002:	e03c      	b.n	800107e <PLL_GetFreqDomain_SYS+0x10a>

	    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
	      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001004:	f7ff fb5a 	bl	80006bc <LL_RCC_HSE_IsEnabledDiv2>
 8001008:	4603      	mov	r3, r0
 800100a:	2b01      	cmp	r3, #1
 800100c:	d102      	bne.n	8001014 <PLL_GetFreqDomain_SYS+0xa0>
	      {
	        pllinputfreq = HSE_VALUE / 2U;
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <PLL_GetFreqDomain_SYS+0x140>)
 8001010:	607b      	str	r3, [r7, #4]
	      }
	      else
	      {
	        pllinputfreq = HSE_VALUE;
	      }
	      break;
 8001012:	e034      	b.n	800107e <PLL_GetFreqDomain_SYS+0x10a>
	        pllinputfreq = HSE_VALUE;
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <PLL_GetFreqDomain_SYS+0x144>)
 8001016:	607b      	str	r3, [r7, #4]
	      break;
 8001018:	e031      	b.n	800107e <PLL_GetFreqDomain_SYS+0x10a>


	    default:
	      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800101a:	f7ff fc81 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d115      	bne.n	8001050 <PLL_GetFreqDomain_SYS+0xdc>
 8001024:	f7ff fc7c 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d106      	bne.n	800103c <PLL_GetFreqDomain_SYS+0xc8>
 800102e:	f7ff fc87 	bl	8000940 <LL_RCC_MSI_GetRange>
 8001032:	4603      	mov	r3, r0
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	e005      	b.n	8001048 <PLL_GetFreqDomain_SYS+0xd4>
 800103c:	f7ff fc8b 	bl	8000956 <LL_RCC_MSI_GetRangeAfterStandby>
 8001040:	4603      	mov	r3, r0
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <PLL_GetFreqDomain_SYS+0x13c>)
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	e014      	b.n	800107a <PLL_GetFreqDomain_SYS+0x106>
 8001050:	f7ff fc66 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d106      	bne.n	8001068 <PLL_GetFreqDomain_SYS+0xf4>
 800105a:	f7ff fc71 	bl	8000940 <LL_RCC_MSI_GetRange>
 800105e:	4603      	mov	r3, r0
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	e005      	b.n	8001074 <PLL_GetFreqDomain_SYS+0x100>
 8001068:	f7ff fc75 	bl	8000956 <LL_RCC_MSI_GetRangeAfterStandby>
 800106c:	4603      	mov	r3, r0
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <PLL_GetFreqDomain_SYS+0x13c>)
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	607b      	str	r3, [r7, #4]
	                                            ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
	                                             LL_RCC_MSI_GetRange() :
	                                             LL_RCC_MSI_GetRangeAfterStandby()));
	      break;
 800107c:	bf00      	nop
	  }
	  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800107e:	f7ff fdb1 	bl	8000be4 <LL_RCC_PLL_GetN>
 8001082:	4602      	mov	r2, r0
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	fb03 f402 	mul.w	r4, r3, r2
 800108a:	f7ff fdc2 	bl	8000c12 <LL_RCC_PLL_GetDivider>
 800108e:	4603      	mov	r3, r0
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	3301      	adds	r3, #1
 8001094:	fbb4 f4f3 	udiv	r4, r4, r3
 8001098:	f7ff fdb0 	bl	8000bfc <LL_RCC_PLL_GetR>
 800109c:	4603      	mov	r3, r0
 800109e:	0f5b      	lsrs	r3, r3, #29
 80010a0:	3301      	adds	r3, #1
 80010a2:	fbb4 f3f3 	udiv	r3, r4, r3
	                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
	}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	080012cc 	.word	0x080012cc
 80010b4:	00f42400 	.word	0x00f42400
 80010b8:	01e84800 	.word	0x01e84800

080010bc <GetSystemClockFreq>:

//------------------ GETSYSTEMCLOCKFREQ -------------------------------------------------------------------------------- GETSYSTEMCLOCKFREQ --------------------------------------------------------*/
	uint32_t GetSystemClockFreq(void)
	{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
	  uint32_t frequency;

	  /* Get SYSCLK source -------------------------------------------------------*/
	  switch (LL_RCC_GetSysClkSource())
 80010c2:	f7ff fc67 	bl	8000994 <LL_RCC_GetSysClkSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b0c      	cmp	r3, #12
 80010ca:	d861      	bhi.n	8001190 <GetSystemClockFreq+0xd4>
 80010cc:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <GetSystemClockFreq+0x18>)
 80010ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d2:	bf00      	nop
 80010d4:	08001109 	.word	0x08001109
 80010d8:	08001191 	.word	0x08001191
 80010dc:	08001191 	.word	0x08001191
 80010e0:	08001191 	.word	0x08001191
 80010e4:	0800116d 	.word	0x0800116d
 80010e8:	08001191 	.word	0x08001191
 80010ec:	08001191 	.word	0x08001191
 80010f0:	08001191 	.word	0x08001191
 80010f4:	08001173 	.word	0x08001173
 80010f8:	08001191 	.word	0x08001191
 80010fc:	08001191 	.word	0x08001191
 8001100:	08001191 	.word	0x08001191
 8001104:	08001189 	.word	0x08001189
	  {
	    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
	      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001108:	f7ff fc0a 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d115      	bne.n	800113e <GetSystemClockFreq+0x82>
 8001112:	f7ff fc05 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001116:	4603      	mov	r3, r0
 8001118:	2b01      	cmp	r3, #1
 800111a:	d106      	bne.n	800112a <GetSystemClockFreq+0x6e>
 800111c:	f7ff fc10 	bl	8000940 <LL_RCC_MSI_GetRange>
 8001120:	4603      	mov	r3, r0
 8001122:	0a1b      	lsrs	r3, r3, #8
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	e005      	b.n	8001136 <GetSystemClockFreq+0x7a>
 800112a:	f7ff fc14 	bl	8000956 <LL_RCC_MSI_GetRangeAfterStandby>
 800112e:	4603      	mov	r3, r0
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	4a32      	ldr	r2, [pc, #200]	; (8001200 <GetSystemClockFreq+0x144>)
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	e014      	b.n	8001168 <GetSystemClockFreq+0xac>
 800113e:	f7ff fbef 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d106      	bne.n	8001156 <GetSystemClockFreq+0x9a>
 8001148:	f7ff fbfa 	bl	8000940 <LL_RCC_MSI_GetRange>
 800114c:	4603      	mov	r3, r0
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	e005      	b.n	8001162 <GetSystemClockFreq+0xa6>
 8001156:	f7ff fbfe 	bl	8000956 <LL_RCC_MSI_GetRangeAfterStandby>
 800115a:	4603      	mov	r3, r0
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	4a27      	ldr	r2, [pc, #156]	; (8001200 <GetSystemClockFreq+0x144>)
 8001164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001168:	607b      	str	r3, [r7, #4]
	                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
	                                          LL_RCC_MSI_GetRange() :
	                                          LL_RCC_MSI_GetRangeAfterStandby()));
	      break;
 800116a:	e043      	b.n	80011f4 <GetSystemClockFreq+0x138>

	    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
	      frequency = HSI_VALUE;
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <GetSystemClockFreq+0x148>)
 800116e:	607b      	str	r3, [r7, #4]
	      break;
 8001170:	e040      	b.n	80011f4 <GetSystemClockFreq+0x138>

	    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
	      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001172:	f7ff faa3 	bl	80006bc <LL_RCC_HSE_IsEnabledDiv2>
 8001176:	4603      	mov	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d102      	bne.n	8001182 <GetSystemClockFreq+0xc6>
	      {
	        frequency = HSE_VALUE / 2U;
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <GetSystemClockFreq+0x148>)
 800117e:	607b      	str	r3, [r7, #4]
	      }
	      else
	      {
	        frequency = HSE_VALUE;
	      }
	      break;
 8001180:	e038      	b.n	80011f4 <GetSystemClockFreq+0x138>
	        frequency = HSE_VALUE;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <GetSystemClockFreq+0x14c>)
 8001184:	607b      	str	r3, [r7, #4]
	      break;
 8001186:	e035      	b.n	80011f4 <GetSystemClockFreq+0x138>


	    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
	      frequency = PLL_GetFreqDomain_SYS();
 8001188:	f7ff fef4 	bl	8000f74 <PLL_GetFreqDomain_SYS>
 800118c:	6078      	str	r0, [r7, #4]
	      break;
 800118e:	e031      	b.n	80011f4 <GetSystemClockFreq+0x138>

	    default:
	      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001190:	f7ff fbc6 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d115      	bne.n	80011c6 <GetSystemClockFreq+0x10a>
 800119a:	f7ff fbc1 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d106      	bne.n	80011b2 <GetSystemClockFreq+0xf6>
 80011a4:	f7ff fbcc 	bl	8000940 <LL_RCC_MSI_GetRange>
 80011a8:	4603      	mov	r3, r0
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	e005      	b.n	80011be <GetSystemClockFreq+0x102>
 80011b2:	f7ff fbd0 	bl	8000956 <LL_RCC_MSI_GetRangeAfterStandby>
 80011b6:	4603      	mov	r3, r0
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <GetSystemClockFreq+0x144>)
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	e014      	b.n	80011f0 <GetSystemClockFreq+0x134>
 80011c6:	f7ff fbab 	bl	8000920 <LL_RCC_MSI_IsEnabledRangeSelect>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d106      	bne.n	80011de <GetSystemClockFreq+0x122>
 80011d0:	f7ff fbb6 	bl	8000940 <LL_RCC_MSI_GetRange>
 80011d4:	4603      	mov	r3, r0
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	e005      	b.n	80011ea <GetSystemClockFreq+0x12e>
 80011de:	f7ff fbba 	bl	8000956 <LL_RCC_MSI_GetRangeAfterStandby>
 80011e2:	4603      	mov	r3, r0
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <GetSystemClockFreq+0x144>)
 80011ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f0:	607b      	str	r3, [r7, #4]
	                                         ((LL_RCC_MSI_IsEnabledRangeSelect()  == 1U) ?
	                                          LL_RCC_MSI_GetRange() :
	                                          LL_RCC_MSI_GetRangeAfterStandby()));
	      break;
 80011f2:	bf00      	nop
	  }

	  return frequency;
 80011f4:	687b      	ldr	r3, [r7, #4]
	}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	080012cc 	.word	0x080012cc
 8001204:	00f42400 	.word	0x00f42400
 8001208:	01e84800 	.word	0x01e84800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001216:	b672      	cpsid	i
}
 8001218:	bf00      	nop
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__disable_irq();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x8>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8001256:	f7fe ff8f 	bl	8000178 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}

0800125e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
	...

0800126c <__libc_init_array>:
 800126c:	b570      	push	{r4, r5, r6, lr}
 800126e:	4d0d      	ldr	r5, [pc, #52]	; (80012a4 <__libc_init_array+0x38>)
 8001270:	4c0d      	ldr	r4, [pc, #52]	; (80012a8 <__libc_init_array+0x3c>)
 8001272:	1b64      	subs	r4, r4, r5
 8001274:	10a4      	asrs	r4, r4, #2
 8001276:	2600      	movs	r6, #0
 8001278:	42a6      	cmp	r6, r4
 800127a:	d109      	bne.n	8001290 <__libc_init_array+0x24>
 800127c:	4d0b      	ldr	r5, [pc, #44]	; (80012ac <__libc_init_array+0x40>)
 800127e:	4c0c      	ldr	r4, [pc, #48]	; (80012b0 <__libc_init_array+0x44>)
 8001280:	f000 f818 	bl	80012b4 <_init>
 8001284:	1b64      	subs	r4, r4, r5
 8001286:	10a4      	asrs	r4, r4, #2
 8001288:	2600      	movs	r6, #0
 800128a:	42a6      	cmp	r6, r4
 800128c:	d105      	bne.n	800129a <__libc_init_array+0x2e>
 800128e:	bd70      	pop	{r4, r5, r6, pc}
 8001290:	f855 3b04 	ldr.w	r3, [r5], #4
 8001294:	4798      	blx	r3
 8001296:	3601      	adds	r6, #1
 8001298:	e7ee      	b.n	8001278 <__libc_init_array+0xc>
 800129a:	f855 3b04 	ldr.w	r3, [r5], #4
 800129e:	4798      	blx	r3
 80012a0:	3601      	adds	r6, #1
 80012a2:	e7f2      	b.n	800128a <__libc_init_array+0x1e>
 80012a4:	0800130c 	.word	0x0800130c
 80012a8:	0800130c 	.word	0x0800130c
 80012ac:	0800130c 	.word	0x0800130c
 80012b0:	08001310 	.word	0x08001310

080012b4 <_init>:
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b6:	bf00      	nop
 80012b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ba:	bc08      	pop	{r3}
 80012bc:	469e      	mov	lr, r3
 80012be:	4770      	bx	lr

080012c0 <_fini>:
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	bf00      	nop
 80012c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c6:	bc08      	pop	{r3}
 80012c8:	469e      	mov	lr, r3
 80012ca:	4770      	bx	lr
